
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from compiler/backend/actions.c.py), do not modify directly.
# Generator: PPK

global file_indentation_level
file_indentation_level = 0

# The last element is the innermost (current) style.
file_sugar_style = ['line_comment']


def add_code(line, lineno = None, file = "compiler/backend/actions.c.py"):
    global file_indentation_level
    global file_sugar_style
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
    }

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = '    ' * file_indentation_level
    return indent + line + sugar(no_sugar_on_line, file, lineno) + line_ends[file_sugar_style[-1]]


class SugarStyle():
    def __init__(self, sugar):
        global file_sugar_style
        file_sugar_style.append(sugar)

    def __enter__(self):
        global file_sugar_style
        return file_sugar_style[-1]

    def __exit__(self, type, value, traceback):
        global file_sugar_style
        file_sugar_style.pop()


def sugar(no_sugar_on_line, file, lineno):
    if no_sugar_on_line or file is None or lineno is None:
        return ""

    import re
    global file_sugar_style

    if file_sugar_style[-1] == 'line_comment':
        if no_sugar_on_line:
            return ""
        return " // {}:{}".format(file, lineno)
    if file_sugar_style[-1] == 'inline_comment':
        if file == "../compiler/backend/actions.c.py":
            return " /* {} */ {}".format(lineno)
        return " /* {}:{} */".format(file, lineno)
    return line


generated_code += "// Autogenerated file (from compiler/backend/actions.c.py via ../compiler/backend/actions.c.py), do not modify directly.\n"
generated_code += "// Generator: PPK\n"
generated_code += "\n"

# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## compiler/backend/actions.c.py:2
#  ## compiler/backend/actions.c.py:3
# Licensed under the Apache License, Version 2.0 (the "License"); ## compiler/backend/actions.c.py:4
# you may not use this file except in compliance with the License. ## compiler/backend/actions.c.py:5
# You may obtain a copy of the License at ## compiler/backend/actions.c.py:6
#  ## compiler/backend/actions.c.py:7
#     http://www.apache.org/licenses/LICENSE-2.0 ## compiler/backend/actions.c.py:8
#  ## compiler/backend/actions.c.py:9
# Unless required by applicable law or agreed to in writing, software ## compiler/backend/actions.c.py:10
# distributed under the License is distributed on an "AS IS" BASIS, ## compiler/backend/actions.c.py:11
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ## compiler/backend/actions.c.py:12
# See the License for the specific language governing permissions and ## compiler/backend/actions.c.py:13
# limitations under the License. ## compiler/backend/actions.c.py:14
from utils.misc import addError, addWarning  ## compiler/backend/actions.c.py:15
from utils.codegen import format_declaration, format_statement, format_expr, format_type, type_env ## compiler/backend/actions.c.py:16

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_lib.h\"", 17)
generated_code += add_code(" #include \"actions.h\"", 18)
generated_code += add_code(" #include <unistd.h>", 19)
generated_code += add_code(" #include \"util.h\"", 20)
generated_code += add_code(" #include \"util_packet.h\"", 21)

generated_code += add_code("")
generated_code += add_code(" extern ctrl_plane_backend bg;", 23)

generated_code += add_code("")
# TODO remove the duplication (with dataplane.c.py) ## compiler/backend/actions.c.py:27
class types: ## compiler/backend/actions.c.py:28
    def __init__(self, new_type_env): ## compiler/backend/actions.c.py:29
        global type_env ## compiler/backend/actions.c.py:30
        self.env_vars = set() ## compiler/backend/actions.c.py:31
        for v in new_type_env: ## compiler/backend/actions.c.py:32
            if v in type_env: ## compiler/backend/actions.c.py:33
                addWarning('adding a type environment', 'variable {} is already bound to type {}'.format(v, type_env[v])) ## compiler/backend/actions.c.py:34
            else: ## compiler/backend/actions.c.py:35
                self.env_vars.add(v) ## compiler/backend/actions.c.py:36
                type_env[v] = new_type_env[v] ## compiler/backend/actions.c.py:37
    def __enter__(self): ## compiler/backend/actions.c.py:39
        global type_env ## compiler/backend/actions.c.py:40
        return type_env ## compiler/backend/actions.c.py:41
    def __exit__(self, type, value, traceback): ## compiler/backend/actions.c.py:43
        global type_env ## compiler/backend/actions.c.py:44
        for v in self.env_vars: ## compiler/backend/actions.c.py:45
            del type_env[v] ## compiler/backend/actions.c.py:46
generated_code += add_code(" extern uint16_t add_packet_to_queue(struct rte_mbuf *mbuf, uint8_t port, uint32_t lcore_id);", 47)

generated_code += add_code("")
# forward declarations for externs ## compiler/backend/actions.c.py:50
for m in hlir16.objects['Method']: ## compiler/backend/actions.c.py:51
    # TODO temporary fix for l3-routing-full, this will be computed later on ## compiler/backend/actions.c.py:52
    with types({ ## compiler/backend/actions.c.py:53
        "T": "struct uint8_buffer_s", ## compiler/backend/actions.c.py:54
        "O": "unsigned", ## compiler/backend/actions.c.py:55
        "HashAlgorithm": "int", ## compiler/backend/actions.c.py:56
        "D": "uint16_t", ## compiler/backend/actions.c.py:57
        "M": "uint32_t", ## compiler/backend/actions.c.py:58
        "P": "uint32_t*", ## compiler/backend/actions.c.py:59
        "Q": "uint8_t*" ## compiler/backend/actions.c.py:60
    }): ## compiler/backend/actions.c.py:61
        t = m.type ## compiler/backend/actions.c.py:62
        ret_type = format_type(t.returnType) ## compiler/backend/actions.c.py:63
        args = ", ".join([format_expr(arg) for arg in t.parameters.parameters if not arg.type._type_ref('is_metadata')] + ['SHORT_STDPARAMS']) ## compiler/backend/actions.c.py:64
        argc=len(args) ## compiler/backend/actions.c.py:65
        generated_code += add_code(' extern {} {}_{}({});'.format(ret_type, m.name, argc, args), 65)
# TODO do not duplicate code ## compiler/backend/actions.c.py:70
def unique_stable(items): ## compiler/backend/actions.c.py:71
    """Returns only the first occurrence of the items in a list. ## compiler/backend/actions.c.py:72
    Equivalent to unique_everseen from Python 3.""" ## compiler/backend/actions.c.py:73
    from collections import OrderedDict ## compiler/backend/actions.c.py:74
    return list(OrderedDict.fromkeys(items)) ## compiler/backend/actions.c.py:75
generated_code += add_code(" char* action_names[] = {", 76)
for table in hlir16.tables: ## compiler/backend/actions.c.py:78
    for action in unique_stable(table.actions): ## compiler/backend/actions.c.py:79
        generated_code += add_code(' "action_{}",'.format(action.action_object.name), 79)
generated_code += add_code(" \"action_set_bitmcast\",", 80)
generated_code += add_code(" \"action_set_clone_egress_port\",", 81)
generated_code += add_code(" };", 82)

generated_code += add_code("")
for ctl in hlir16.controls: ## compiler/backend/actions.c.py:87
    for act in ctl.actions: ## compiler/backend/actions.c.py:88
        fun_params = ["SHORT_STDPARAMS", "action_{}_params_t parameters".format(act.name)] ## compiler/backend/actions.c.py:89
        generated_code += add_code(' void action_code_{}({}) {{'.format(act.name, ', '.join(fun_params)), 90)
        generated_code += add_code("     uint32_t value32, res32, mask32;", 91)
        generated_code += add_code("     (void)value32; (void)res32; (void)mask32;", 92)
        generated_code += add_code('     control_locals_{}_t* local_vars = (control_locals_{}_t*) pd->control_locals;'.format(ctl.name, ctl.name), 93)
        for stmt in act.body.components: ## compiler/backend/actions.c.py:96
            global pre_statement_buffer ## compiler/backend/actions.c.py:97
            global post_statement_buffer ## compiler/backend/actions.c.py:98
            pre_statement_buffer = "" ## compiler/backend/actions.c.py:99
            post_statement_buffer = "" ## compiler/backend/actions.c.py:100
            code = format_statement(stmt, ctl) ## compiler/backend/actions.c.py:102
            if pre_statement_buffer != "": ## compiler/backend/actions.c.py:103
                generated_code += str( pre_statement_buffer) ## compiler/backend/actions.c.py:103
                pre_statement_buffer = "" ## compiler/backend/actions.c.py:105
            generated_code += str( code) ## compiler/backend/actions.c.py:105
            if post_statement_buffer != "": ## compiler/backend/actions.c.py:107
                generated_code += str( post_statement_buffer) ## compiler/backend/actions.c.py:107
                post_statement_buffer = "" ## compiler/backend/actions.c.py:109
        generated_code += add_code(" }", 110)
        generated_code += add_code("", 111)
generated_code += add_code(" void action_code_set_bitmcast(SHORT_STDPARAMS, action_set_bitmcast_params_t parameters) {", 112)
generated_code += add_code("     uint32_t value32, res32, mask32;", 113)
generated_code += add_code("     (void)value32; (void)res32; (void)mask32;", 114)
generated_code += add_code('     control_locals_{}_t* local_vars = (control_locals_{}_t*) pd->control_locals;'.format(ctl.name, ctl.name), 115)
generated_code += add_code("     memcpy(&value32, &(parameters.bit_mcast), 4);", 116)
generated_code += add_code("     value32 = rte_be_to_cpu_32(value32);", 117)
generated_code += add_code("     set_field((fldT[]){{pd, header_instance_all_metadatas, field_standard_metadata_t_bit_mcast}}, 0, value32, 32); ", 118)
generated_code += add_code("     value32 = 254;", 119)
generated_code += add_code("     set_field((fldT[]){{pd, header_instance_all_metadatas, field_standard_metadata_t_egress_spec}}, 0, value32, 9);", 120)
generated_code += add_code(" }", 121)

generated_code += add_code("")
generated_code += add_code(" void action_code_set_clone_egress_port(SHORT_STDPARAMS, action_set_clone_egress_port_params_t parameters) {", 123)
generated_code += add_code("     uint32_t value32, res32, mask32;", 124)
generated_code += add_code("     (void)value32; (void)res32; (void)mask32;", 125)
generated_code += add_code('     control_locals_{}_t* local_vars = (control_locals_{}_t*) pd->control_locals;'.format(ctl.name, ctl.name), 126)
generated_code += add_code("     memcpy(&value32, &(parameters.egress_port), 2);", 127)
generated_code += add_code("     set_field((fldT[]){{clone_pd, header_instance_all_metadatas, field_standard_metadata_t_egress_spec}}, 0, value32, 9);", 128)
generated_code += add_code("     //int egress_port = GET_INT32_AUTO_PACKET(pd, header_instance_all_metadatas, field_standard_metadata_t_egress_spec);", 129)
generated_code += add_code("     //uint16_t queue_length = add_packet_to_queue(pd, egress_port, rte_lcore_id());", 130)
generated_code += add_code(" }", 131)
