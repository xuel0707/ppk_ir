
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from compiler/backend/tables.c.py), do not modify directly.
# Generator: PPK

global file_indentation_level
file_indentation_level = 0

# The last element is the innermost (current) style.
file_sugar_style = ['line_comment']


def add_code(line, lineno = None, file = "compiler/backend/tables.c.py"):
    global file_indentation_level
    global file_sugar_style
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
    }

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = '    ' * file_indentation_level
    return indent + line + sugar(no_sugar_on_line, file, lineno) + line_ends[file_sugar_style[-1]]


class SugarStyle():
    def __init__(self, sugar):
        global file_sugar_style
        file_sugar_style.append(sugar)

    def __enter__(self):
        global file_sugar_style
        return file_sugar_style[-1]

    def __exit__(self, type, value, traceback):
        global file_sugar_style
        file_sugar_style.pop()


def sugar(no_sugar_on_line, file, lineno):
    if no_sugar_on_line or file is None or lineno is None:
        return ""

    import re
    global file_sugar_style

    if file_sugar_style[-1] == 'line_comment':
        if no_sugar_on_line:
            return ""
        return " // {}:{}".format(file, lineno)
    if file_sugar_style[-1] == 'inline_comment':
        if file == "../compiler/backend/tables.c.py":
            return " /* {} */ {}".format(lineno)
        return " /* {}:{} */".format(file, lineno)
    return line


generated_code += "// Autogenerated file (from compiler/backend/tables.c.py via ../compiler/backend/tables.c.py), do not modify directly.\n"
generated_code += "// Generator: PPK\n"
generated_code += "\n"

# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## compiler/backend/tables.c.py:2
#  ## compiler/backend/tables.c.py:3
# Licensed under the Apache License, Version 2.0 (the "License"); ## compiler/backend/tables.c.py:4
# you may not use this file except in compliance with the License. ## compiler/backend/tables.c.py:5
# You may obtain a copy of the License at ## compiler/backend/tables.c.py:6
#  ## compiler/backend/tables.c.py:7
#     http://www.apache.org/licenses/LICENSE-2.0 ## compiler/backend/tables.c.py:8
#  ## compiler/backend/tables.c.py:9
# Unless required by applicable law or agreed to in writing, software ## compiler/backend/tables.c.py:10
# distributed under the License is distributed on an "AS IS" BASIS, ## compiler/backend/tables.c.py:11
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ## compiler/backend/tables.c.py:12
# See the License for the specific language governing permissions and ## compiler/backend/tables.c.py:13
# limitations under the License. ## compiler/backend/tables.c.py:14
from utils.misc import addError, addWarning ## compiler/backend/tables.c.py:15

generated_code += add_code("")
generated_code += add_code(" #include \"dataplane.h\"", 16)
generated_code += add_code(" #include \"actions.h\"", 17)
generated_code += add_code(" #include \"tables.h\"", 18)
generated_code += add_code(" #include \"stateful_memory.h\"", 19)
generated_code += add_code("", 20)

generated_code += add_code("")
generated_code += add_code(" lookup_table_t table_config[NB_TABLES] = {", 22)
for table in hlir16.tables: ## compiler/backend/tables.c.py:24
    tmt = table.match_type if hasattr(table, 'key') else "none" ## compiler/backend/tables.c.py:25
    ks  = table.key_length_bytes if hasattr(table, 'key') else 0 ## compiler/backend/tables.c.py:26
    generated_code += add_code(" {", 26)
    generated_code += add_code('  .name= "{}",'.format(table.name), 27)
    generated_code += add_code('  .id = TABLE_{},'.format(table.name), 28)
    generated_code += add_code('  .type = LOOKUP_{},'.format(tmt), 29)
    generated_code += add_code("  .entry = {", 31)
    generated_code += add_code("      .entry_count = 0,", 32)
    generated_code += add_code('      .key_size = {},'.format(ks), 34)
    generated_code += add_code('      .entry_size = sizeof(struct {}_action) + sizeof(entry_validity_t),'.format(table.name), 36)
    generated_code += add_code('      .action_size   = sizeof(struct {}_action),'.format(table.name), 37)
    generated_code += add_code("      .validity_size = sizeof(entry_validity_t),", 38)
    generated_code += add_code("  },", 39)
    generated_code += add_code("  .min_size = 0,", 41)
    generated_code += add_code("  .max_size = 250000,", 42)
    generated_code += add_code(" },", 43)
generated_code += add_code("  { ", 44)
generated_code += add_code("    .name= \"multicast_group_table\", ", 45)
generated_code += add_code("    .id = TABLE_multicast_group_table, ", 46)
generated_code += add_code("    .type = LOOKUP_EXACT, ", 47)
generated_code += add_code("    .entry = { ", 48)
generated_code += add_code("        .entry_count = 0, ", 49)
generated_code += add_code("        .key_size = 2, ", 50)
generated_code += add_code("        .entry_size = sizeof(struct multicast_group_table_action) + sizeof(entry_validity_t), ", 51)
generated_code += add_code("        .action_size   = sizeof(struct multicast_group_table_action), ", 52)
generated_code += add_code("        .validity_size = sizeof(entry_validity_t), ", 53)
generated_code += add_code("    }, ", 54)
generated_code += add_code("    .min_size = 0, ", 55)
generated_code += add_code("    .max_size = 250000, ", 56)
generated_code += add_code("   }, ", 57)
generated_code += add_code("  { ", 58)
generated_code += add_code("    .name= \"clone_session_table\", ", 59)
generated_code += add_code("    .id = TABLE_clone_session_table, ", 60)
generated_code += add_code("    .type = LOOKUP_EXACT, ", 61)
generated_code += add_code("    .entry = { ", 62)
generated_code += add_code("        .entry_count = 0, ", 63)
generated_code += add_code("        .key_size = 4, ", 64)
generated_code += add_code("        .entry_size = sizeof(struct clone_session_table_action) + sizeof(entry_validity_t), ", 65)
generated_code += add_code("        .action_size   = sizeof(struct clone_session_table_action), ", 66)
generated_code += add_code("        .validity_size = sizeof(entry_validity_t), ", 67)
generated_code += add_code("    }, ", 68)
generated_code += add_code("    .min_size = 0, ", 69)
generated_code += add_code("    .max_size = 250000, ", 70)
generated_code += add_code("   }, ", 71)
generated_code += add_code(" };", 72)

generated_code += add_code("")
