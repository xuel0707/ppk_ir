
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from compiler/backend/dataplane.c.py), do not modify directly.
# Generator: PPK

global file_indentation_level
file_indentation_level = 0

# The last element is the innermost (current) style.
file_sugar_style = ['line_comment']


def add_code(line, lineno = None, file = "compiler/backend/dataplane.c.py"):
    global file_indentation_level
    global file_sugar_style
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
    }

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = '    ' * file_indentation_level
    return indent + line + sugar(no_sugar_on_line, file, lineno) + line_ends[file_sugar_style[-1]]


class SugarStyle():
    def __init__(self, sugar):
        global file_sugar_style
        file_sugar_style.append(sugar)

    def __enter__(self):
        global file_sugar_style
        return file_sugar_style[-1]

    def __exit__(self, type, value, traceback):
        global file_sugar_style
        file_sugar_style.pop()


def sugar(no_sugar_on_line, file, lineno):
    if no_sugar_on_line or file is None or lineno is None:
        return ""

    import re
    global file_sugar_style

    if file_sugar_style[-1] == 'line_comment':
        if no_sugar_on_line:
            return ""
        return " // {}:{}".format(file, lineno)
    if file_sugar_style[-1] == 'inline_comment':
        if file == "../compiler/backend/dataplane.c.py":
            return " /* {} */ {}".format(lineno)
        return " /* {}:{} */".format(file, lineno)
    return line


generated_code += "// Autogenerated file (from compiler/backend/dataplane.c.py via ../compiler/backend/dataplane.c.py), do not modify directly.\n"
generated_code += "// Generator: PPK\n"
generated_code += "\n"

# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## compiler/backend/dataplane.c.py:2
#  ## compiler/backend/dataplane.c.py:3
# Licensed under the Apache License, Version 2.0 (the "License"); ## compiler/backend/dataplane.c.py:4
# you may not use this file except in compliance with the License. ## compiler/backend/dataplane.c.py:5
# You may obtain a copy of the License at ## compiler/backend/dataplane.c.py:6
#  ## compiler/backend/dataplane.c.py:7
#     http://www.apache.org/licenses/LICENSE-2.0 ## compiler/backend/dataplane.c.py:8
#  ## compiler/backend/dataplane.c.py:9
# Unless required by applicable law or agreed to in writing, software ## compiler/backend/dataplane.c.py:10
# distributed under the License is distributed on an "AS IS" BASIS, ## compiler/backend/dataplane.c.py:11
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ## compiler/backend/dataplane.c.py:12
# See the License for the specific language governing permissions and ## compiler/backend/dataplane.c.py:13
# limitations under the License. ## compiler/backend/dataplane.c.py:14

generated_code += add_code("")
from utils.codegen import format_declaration, format_statement, format_expr, format_type, type_env ## compiler/backend/dataplane.c.py:16
from utils.misc import addError, addWarning ## compiler/backend/dataplane.c.py:17

generated_code += add_code("")
generated_code += add_code(" #include <stdlib.h>", 18)
generated_code += add_code(" #include <string.h>", 19)
generated_code += add_code(" #include <stdbool.h>", 20)
generated_code += add_code(" #include \"dpdk_lib.h\"", 21)
generated_code += add_code(" #include \"actions.h\"", 22)
generated_code += add_code(" #include \"backend.h\"", 23)
generated_code += add_code(" #include \"util.h\"", 24)
generated_code += add_code(" #include \"util_packet.h\"", 25)
generated_code += add_code(" #include \"tables.h\"", 26)

generated_code += add_code("")
generated_code += add_code(" uint8_t* emit_addr;", 28)
generated_code += add_code(" uint32_t ingress_pkt_len;", 29)

generated_code += add_code("")
generated_code += add_code(" extern ctrl_plane_backend bg;", 31)
generated_code += add_code(" extern char* action_names[];", 32)

generated_code += add_code("")
generated_code += add_code(" extern void parse_packet(packet_descriptor_t* pd, lookup_table_t** tables, parser_state_t* pstate);", 34)
generated_code += add_code(" extern void increase_counter(int counterid, int index);", 35)
generated_code += add_code(" extern void set_handle_packet_metadata(packet_descriptor_t* pd, uint32_t portid);", 36)

generated_code += add_code("")
# note: 0 is for the special case where there are no tables ## compiler/backend/dataplane.c.py:39
max_key_length = max([t.key_length_bytes for t in hlir16.tables if hasattr(t, 'key')] + [0]) ## compiler/backend/dataplane.c.py:40
generated_code += add_code(' uint8_t reverse_buffer[{}];'.format(max_key_length), 40)

generated_code += add_code("")
################################################################################ ## compiler/backend/dataplane.c.py:43

generated_code += add_code("")
packet_name = hlir16.p4_main.type.baseType.type_ref.name ## compiler/backend/dataplane.c.py:45
pipeline_elements = hlir16.p4_main.arguments ## compiler/backend/dataplane.c.py:46

generated_code += add_code("")
if hlir16.p4_model == 'V1Switch': ## compiler/backend/dataplane.c.py:48
    p4_ctls = [ctl for pe in pipeline_elements for ctl in [hlir16.objects.get(pe.expression.type.name, 'P4Control')] if ctl is not None] ## compiler/backend/dataplane.c.py:49
elif hlir16.p4_model == 'PSA_Switch': ## compiler/backend/dataplane.c.py:50
    parsers_controls = [hlir16.objects.get(arg2.expression.type.name, ['P4Control', 'P4Parser']) ## compiler/backend/dataplane.c.py:51
        for arg in hlir16.p4_main.arguments ## compiler/backend/dataplane.c.py:52
        if arg.expression.node_type == "PathExpression" # ignoring PacketReplicationEngine and BufferingQueueingEngine for now ## compiler/backend/dataplane.c.py:53
        for arg2 in arg.expression.ref.arguments ## compiler/backend/dataplane.c.py:54
        ] ## compiler/backend/dataplane.c.py:55
    p4_ctls = [pc for pc in parsers_controls if pc.node_type == 'P4Control'] ## compiler/backend/dataplane.c.py:57
else: ## compiler/backend/dataplane.c.py:58
    # if the P4 model is unknown, it would already be detected ## compiler/backend/dataplane.c.py:59
    pass ## compiler/backend/dataplane.c.py:60
generated_code += add_code(" struct apply_result_s {", 62)
generated_code += add_code("     bool hit;", 63)
generated_code += add_code("     enum actions action_run;", 64)
generated_code += add_code(" };", 65)

generated_code += add_code("")
for ctl in p4_ctls: ## compiler/backend/dataplane.c.py:68
    generated_code += add_code(' void control_{}(STDPARAMS);'.format(ctl.name), 68)
    for t in ctl.controlLocals['P4Table']: ## compiler/backend/dataplane.c.py:70
        generated_code += add_code(' struct apply_result_s {}_apply(STDPARAMS);'.format(t.name), 70)
generated_code += add_code(" struct apply_result_s multicast_group_table_apply(STDPARAMS);", 71)
generated_code += add_code(" struct apply_result_s clone_session_table_apply(enum enum_CloneType type, uint32_t clone_session, SHORT_STDPARAMS);", 72)

generated_code += add_code("")
################################################################################ ## compiler/backend/dataplane.c.py:75

generated_code += add_code("")
# TODO move this to HAL ## compiler/backend/dataplane.c.py:77
def match_type_order(t): ## compiler/backend/dataplane.c.py:78
    if t == 'EXACT':   return 0 ## compiler/backend/dataplane.c.py:79
    if t == 'LPM':     return 1 ## compiler/backend/dataplane.c.py:80
    if t == 'TERNARY': return 2 ## compiler/backend/dataplane.c.py:81
    else:              return 3 ## compiler/backend/dataplane.c.py:82
################################################################################ ## compiler/backend/dataplane.c.py:84
# Table key calculation ## compiler/backend/dataplane.c.py:85

generated_code += add_code("")
for table in hlir16.tables: ## compiler/backend/dataplane.c.py:87
    if not hasattr(table, 'key'): ## compiler/backend/dataplane.c.py:88
        continue ## compiler/backend/dataplane.c.py:89
    generated_code += add_code(' void table_{}_key(packet_descriptor_t* pd, uint8_t* key) {{'.format(table.name), 89)
    sortedfields = sorted(table.key.keyElements, key=lambda k: match_type_order(k.match_type)) ## compiler/backend/dataplane.c.py:91
    #TODO variable length fields ## compiler/backend/dataplane.c.py:92
    #TODO field masks ## compiler/backend/dataplane.c.py:93
    for f in sortedfields: ## compiler/backend/dataplane.c.py:94
        if f.get_attr('width') is None: ## compiler/backend/dataplane.c.py:95
            addError('Computing key for table', 'the width attribute of field {} is missing'.format(f.name)) ## compiler/backend/dataplane.c.py:96
            continue ## compiler/backend/dataplane.c.py:97
        hi_name = "all_metadatas" if f.header_name in ['standard_metadata'] else f.header.name ## compiler/backend/dataplane.c.py:99
        href = "header_instance_{}".format(hi_name) ## compiler/backend/dataplane.c.py:100
        # fref = "field_{}_{}".format(f.header_name, f.field_name) ## compiler/backend/dataplane.c.py:101
        fref = "field_{}_{}".format(f.header.type.type_ref.name, f.field_name) ## compiler/backend/dataplane.c.py:102
        if f.width <= 32: ## compiler/backend/dataplane.c.py:104
            byte_width = (f.width+7)/8 ## compiler/backend/dataplane.c.py:105
            generated_code += add_code(" #ifdef PPK_DEBUG", 105)
            generated_code += add_code('     if (unlikely(pd->headers[header_instance_{}].pointer == NULL)) {{'.format(hi_name), 106)
            generated_code += add_code('         debug(" " T4LIT(!!!!,error) " " T4LIT(Lookup on invalid header,error) " " T4LIT({},header) "." T4LIT({},field) "\\n");'.format(hi_name, f.field_name), 107)
            generated_code += add_code("     }", 108)
            generated_code += add_code(" #endif", 109)
            if f.width <= 16 and hi_name == "all_metadatas": ## compiler/backend/dataplane.c.py:111
                generated_code += add_code(' EXTRACT_INT32_NTOH_PACKET(pd, {}, {}, *(uint16_t*)key)'.format(href, fref), 111)
                generated_code += add_code(' key += {};'.format(byte_width), 112)
            elif hi_name == "meta": ## compiler/backend/dataplane.c.py:114
                generated_code += add_code(' EXTRACT_INT32_NTOH_PACKET(pd, {}, {}, *(uint32_t*)key)'.format(href, fref), 114)
                generated_code += add_code(' key += {};'.format(byte_width), 115)
            else: ## compiler/backend/dataplane.c.py:117
                generated_code += add_code(' EXTRACT_INT32_BITS_PACKET(pd, {}, {}, *(uint32_t*)key)'.format(href, fref), 117)
                generated_code += add_code(' key += {};'.format(byte_width), 118)
        elif f.width > 32 and f.width % 8 == 0: ## compiler/backend/dataplane.c.py:120
            byte_width = (f.width+7)/8 ## compiler/backend/dataplane.c.py:121
            generated_code += add_code(' EXTRACT_BYTEBUF_PACKET(pd, {}, {}, key)'.format(href, fref), 121)
            generated_code += add_code(' key += {};'.format(byte_width), 122)
        else: ## compiler/backend/dataplane.c.py:124
            addWarning("table key calculation", "Skipping unsupported field {} ({} bits): it is over 32 bits long and not byte aligned".format(f.id, f.width)) ## compiler/backend/dataplane.c.py:125
    if table.match_type == "LPM": ## compiler/backend/dataplane.c.py:127
        generated_code += add_code(' key -= {};'.format(table.key_length_bytes), 127)
        generated_code += add_code(" int c, d;", 128)
        generated_code += add_code(' for(c = {}, d = 0; c >= 0; c--, d++) *(reverse_buffer+d) = *(key+c);'.format(table.key_length_bytes-1), 129)
        generated_code += add_code(' for(c = 0; c < {}; c++) *(key+c) = *(reverse_buffer+c);'.format(table.key_length_bytes), 130)
    generated_code += add_code(" }", 131)
generated_code += add_code(" void multicast_group_table_key(packet_descriptor_t* pd, uint8_t* key) {", 132)
generated_code += add_code("  #ifdef PPK_DEBUG ", 133)
generated_code += add_code("      if (unlikely(pd->headers[header_instance_all_metadatas].pointer == NULL)) { ", 134)
generated_code += add_code("          debug(\" \" T4LIT(!!!!,error) \" \" T4LIT(Lookup on invalid header,error) \" \" T4LIT(all_metadatas,header) \".\" T4LIT(mcast_grp,field) \"\\n\");", 135)
generated_code += add_code("      } ", 136)
generated_code += add_code("  #endif ", 137)
generated_code += add_code("  EXTRACT_INT32_BITS_PACKET(pd, header_instance_all_metadatas, field_standard_metadata_t_mcast_grp, *(uint32_t*)key) ", 138)
generated_code += add_code("  key += 2; ", 139)
generated_code += add_code("  } ", 140)

generated_code += add_code("")
################################################################################ ## compiler/backend/dataplane.c.py:143
# Table application ## compiler/backend/dataplane.c.py:144

generated_code += add_code("")
def unique_stable(items): ## compiler/backend/dataplane.c.py:146
    """Returns only the first occurrence of the items in a list. ## compiler/backend/dataplane.c.py:147
    Equivalent to unique_everseen from Python 3.""" ## compiler/backend/dataplane.c.py:148
    from collections import OrderedDict ## compiler/backend/dataplane.c.py:149
    return list(OrderedDict.fromkeys(items)) ## compiler/backend/dataplane.c.py:150
components = [] ## compiler/backend/dataplane.c.py:151
for table in hlir16.tables: ## compiler/backend/dataplane.c.py:152
    if hasattr(table, 'direct_counters'): ## compiler/backend/dataplane.c.py:153
        for smem in table.direct_meters + table.direct_counters: ## compiler/backend/dataplane.c.py:154
            for comp in smem.components: ## compiler/backend/dataplane.c.py:155
                components.append(comp['type']) ## compiler/backend/dataplane.c.py:156
# for type in unique_stable(components): ## compiler/backend/dataplane.c.py:157
#     #[ void apply_direct_smem_$type($type* smem, uint32_t value, char* table_name, char* smem_type_name, char* smem_name) { ## compiler/backend/dataplane.c.py:158
#     #[    debug("     : applying apply_direct_smem_$type(register_uint32_t (*smem)[1], uint32_t value, char* table_name, char* smem_type_name, char* smem_name)"); ## compiler/backend/dataplane.c.py:159
#     #[ } ## compiler/backend/dataplane.c.py:160

generated_code += add_code("")
for table in hlir16.tables: ## compiler/backend/dataplane.c.py:163
    lookupfun = {'LPM':'lpm_lookup', 'EXACT':'exact_lookup', 'TERNARY':'ternary_lookup'} ## compiler/backend/dataplane.c.py:164
    generated_code += add_code(' struct apply_result_s {}_apply(STDPARAMS)'.format(table.name), 164)
    generated_code += add_code(" {", 165)
    if hasattr(table, 'key') and len(table.key.keyElements) > 0: ## compiler/backend/dataplane.c.py:167
        generated_code += add_code('     uint8_t* key[{}];'.format(table.key_length_bytes), 167)
        generated_code += add_code('     table_{}_key(pd, (uint8_t*)key);'.format(table.name), 168)
        generated_code += add_code('     dbg_bytes(key, table_config[TABLE_{}].entry.key_size,'.format(table.name), 170)
        generated_code += add_code('               " " T4LIT(????,table) " Table lookup " T4LIT({},table) "/" T4LIT({}) "/" T4LIT(%d) ": %s",'.format(table.name, table.match_type), 171)
        generated_code += add_code('               {},'.format(table.key_length_bytes), 172)
        generated_code += add_code('               {} == 0 ? "" T4LIT((empty key),bytes) "" : "");'.format(table.key_length_bytes), 173)
        generated_code += add_code('     table_entry_{}_t* entry = (table_entry_{}_t*){}(tables[TABLE_{}], (uint8_t*)key);'.format(table.name, table.name, lookupfun[table.match_type], table.name), 175)
        generated_code += add_code("     bool hit = entry != NULL && entry->is_entry_valid != INVALID_TABLE_ENTRY;", 176)
        generated_code += add_code('     debug("   " T4LIT(??,table) " Lookup " T4LIT(%s,success) ": " T4LIT(%s,action) "%s\\n",', 178)
        generated_code += add_code("               hit ? \"hit\" : \"miss\",", 179)
        generated_code += add_code("               entry == NULL ? \"(no action)\" : action_names[entry->action.action_id],", 180)
        generated_code += add_code("               hit ? \"\" : \" (default)\");", 181)
        generated_code += add_code("     if (likely(hit)) {", 183)
        generated_code += add_code("         // applying direct counters and meters", 184)
            # ACTIONS ## compiler/backend/dataplane.c.py:186
        generated_code += add_code("         if (likely(entry != 0)) {", 186)
        generated_code += add_code("           switch (entry->action.action_id) {", 187)
        for action in table.actions: ## compiler/backend/dataplane.c.py:189
            action_name = action.action_object.name ## compiler/backend/dataplane.c.py:190
            if action_name == table.default_action.expression.method.path.name: ## compiler/backend/dataplane.c.py:191
                continue ## compiler/backend/dataplane.c.py:192
            if action_name == 'NoAction': ## compiler/backend/dataplane.c.py:193
                continue ## compiler/backend/dataplane.c.py:194
            generated_code += add_code('             case action_{}:'.format(action_name), 194)
            generated_code += add_code('               action_code_{}(SHORT_STDPARAMS_IN, entry->action.{}_params);'.format(action_name, action_name), 195)
            generated_code += add_code("               break;", 196)
        generated_code += add_code("       }", 197)
        generated_code += add_code("     }", 198)
        if hasattr(table, 'direct_counters'): ## compiler/backend/dataplane.c.py:200
            for smem in table.direct_meters + table.direct_counters: ## compiler/backend/dataplane.c.py:201
                for comp in smem.components: ## compiler/backend/dataplane.c.py:202
                    value = "packet_length(pd)" if comp['for'] == 'bytes' else "1" ## compiler/backend/dataplane.c.py:203
                    type = comp['type'] ## compiler/backend/dataplane.c.py:204
                    name  = comp['name'] ## compiler/backend/dataplane.c.py:205
                    generated_code += add_code(' extern void apply_{}({}_t*, int, const char*, const char*, const char*);'.format(smem.smem_type, smem.smem_type), 205)
                    generated_code += add_code(' apply_{}(&(global_smem.{}_{}), {}, "{}", "{}", "{}");'.format(smem.smem_type, name, table.name, value, table.name, smem.smem_type, name), 206)
        generated_code += add_code("    }", 207)
        generated_code += add_code("     else {", 208)
        action_name = table.default_action.expression.method.path.name ## compiler/backend/dataplane.c.py:210
        generated_code += add_code('           action_code_{}(SHORT_STDPARAMS_IN, entry->action.{}_params);'.format(action_name, action_name), 210)
        generated_code += add_code("    }", 211)
    else: ## compiler/backend/dataplane.c.py:213
        if len(table.actions) > 0 and  hasattr(table, 'default_action') and table.default_action.expression.method.ref.name != table.actions[0].action_object.name: ## compiler/backend/dataplane.c.py:214
            action = table.actions[0].action_object.name ## compiler/backend/dataplane.c.py:215
        elif hasattr(table, 'default_action'): ## compiler/backend/dataplane.c.py:216
            action = table.default_action.expression.method.ref.name ## compiler/backend/dataplane.c.py:217
        else : ## compiler/backend/dataplane.c.py:218
            action = None ## compiler/backend/dataplane.c.py:219
        # action = table.default_action.expression.method.ref.name if hasattr(table, 'default_action') else None ## compiler/backend/dataplane.c.py:220
        if action: ## compiler/backend/dataplane.c.py:222
            generated_code += add_code('    debug(" :::: Lookup on keyless table " T4LIT({},table) ", default action is " T4LIT({},action) "\\n");'.format(table.name, action), 222)
            generated_code += add_code('    table_entry_{}_t resStruct = {{'.format(table.name), 223)
            generated_code += add_code('        .action = {{ action_{} }},'.format(action), 224)
            generated_code += add_code("    };", 225)
            generated_code += add_code('    table_entry_{}_t* entry = &resStruct;'.format(table.name), 226)
            generated_code += add_code("    bool hit = true;", 227)
            generated_code += add_code("    bool is_default = false;", 228)
        else: ## compiler/backend/dataplane.c.py:230
            generated_code += add_code('    debug(" :::: Lookup on keyless table " T4LIT({},table) ", " T4LIT(no default action,action) "\\n");'.format(table.name), 230)
            generated_code += add_code('    table_entry_{}_t* entry = (struct {}_action*)0;'.format(table.name, table.name), 231)
            generated_code += add_code("    bool hit = false;", 232)
            generated_code += add_code("    bool is_default = false;", 233)
        # ACTIONS ## compiler/backend/dataplane.c.py:237
        generated_code += add_code("     if (likely(entry != 0)) {", 237)
        generated_code += add_code("       switch (entry->action.action_id) {", 238)
        for action in table.actions: ## compiler/backend/dataplane.c.py:240
            action_name = action.action_object.name ## compiler/backend/dataplane.c.py:241
            if action_name == 'NoAction': ## compiler/backend/dataplane.c.py:242
                continue ## compiler/backend/dataplane.c.py:243
            generated_code += add_code('         case action_{}:'.format(action_name), 243)
            generated_code += add_code('           action_code_{}(SHORT_STDPARAMS_IN, entry->action.{}_params);'.format(action_name, action_name), 244)
            generated_code += add_code("           break;", 245)
        generated_code += add_code("       }", 246)
        generated_code += add_code("     }", 247)
    generated_code += add_code("     struct apply_result_s apply_result = { hit, hit ? entry->action.action_id : -1 };", 249)
    generated_code += add_code("     return apply_result;", 250)
    generated_code += add_code(" }", 251)
generated_code += add_code("  struct apply_result_s multicast_group_table_apply(STDPARAMS) ", 252)
generated_code += add_code("  { ", 253)
generated_code += add_code("      uint8_t* key[2]; ", 254)
generated_code += add_code("      multicast_group_table_key(pd, (uint8_t*)key); ", 255)
generated_code += add_code("      dbg_bytes(key, table_config[TABLE_multicast_group_table].entry.key_size, ", 256)
generated_code += add_code("                \" \" T4LIT(????,table) \" Table lookup \" T4LIT(multicast_group_table,table) \"/\" T4LIT(EXACT) \"/\" T4LIT(%d) \": %s\", ", 257)
generated_code += add_code("                4, ", 258)
generated_code += add_code("                4 == 0 ? \"\" T4LIT((empty key),bytes) \"\" : \"\"); ", 259)
generated_code += add_code("      table_entry_multicast_group_table_t* entry = (table_entry_multicast_group_table_t*)exact_lookup(tables[TABLE_multicast_group_table], (uint8_t*)key); ", 260)
generated_code += add_code("      bool hit = entry != NULL && entry->is_entry_valid != INVALID_TABLE_ENTRY; ", 261)
generated_code += add_code("      debug(\"   \" T4LIT(??,table) \" Lookup \" T4LIT(%s,success) \": \" T4LIT(%s,action) \"%s\\n\",", 262)
generated_code += add_code("                hit ? \"hit\" : \"miss\", ", 263)
generated_code += add_code("                entry == NULL ? \"(no action)\" : action_names[entry->action.action_id], ", 264)
generated_code += add_code("                hit ? \"\" : \" (default)\"); ", 265)
generated_code += add_code("      if (likely(hit)) { ", 266)
generated_code += add_code("          ", 267)
generated_code += add_code("          if (likely(entry != 0)) { ", 268)
generated_code += add_code("            switch (entry->action.action_id) { ", 269)
generated_code += add_code("              case action_set_bitmcast: ", 270)
generated_code += add_code("                action_code_set_bitmcast(SHORT_STDPARAMS_IN, entry->action.set_bitmcast_params); ", 271)
generated_code += add_code("                break; ", 272)
generated_code += add_code("        } ", 273)
generated_code += add_code("      } ", 274)
generated_code += add_code("     } ", 275)
generated_code += add_code("      struct apply_result_s apply_result = { hit, hit ? entry->action.action_id : -1 }; ", 276)
generated_code += add_code("      return apply_result; ", 277)
generated_code += add_code("  } ", 278)
generated_code += add_code("  struct apply_result_s clone_session_table_apply(enum enum_CloneType type, uint32_t clone_session,SHORT_STDPARAMS) ", 279)
generated_code += add_code("  { ", 280)
generated_code += add_code("      uint8_t key[4]; ", 281)
generated_code += add_code("", 282)
generated_code += add_code("      uint32_t val = clone_session;", 283)
generated_code += add_code("      memcpy(key, &val, 4);", 284)
generated_code += add_code("      dbg_bytes(key, table_config[TABLE_clone_session_table].entry.key_size, ", 285)
generated_code += add_code("                \" \" T4LIT(????,table) \" Table lookup \" T4LIT(clone_session_table,table) \"/\" T4LIT(EXACT) \"/\" T4LIT(%d) \": %s\", ", 286)
generated_code += add_code("                4, ", 287)
generated_code += add_code("                4 == 0 ? \"\" T4LIT((empty key),bytes) \"\" : \"\"); ", 288)
generated_code += add_code("      table_entry_clone_session_table_t* entry = (table_entry_clone_session_table_t*)exact_lookup(tables[TABLE_clone_session_table], (uint8_t*)key); ", 289)
generated_code += add_code("      bool hit = entry != NULL && entry->is_entry_valid != INVALID_TABLE_ENTRY; ", 290)
generated_code += add_code("      debug(\"   \" T4LIT(??,table) \" Lookup \" T4LIT(%s,success) \": \" T4LIT(%s,action) \"%s\\n\",", 291)
generated_code += add_code("                hit ? \"hit\" : \"miss\", ", 292)
generated_code += add_code("                entry == NULL ? \"(no action)\" : action_names[entry->action.action_id], ", 293)
generated_code += add_code("                hit ? \"\" : \" (default)\"); ", 294)
generated_code += add_code("      if (likely(hit)) { ", 295)
generated_code += add_code("          ", 296)
generated_code += add_code("          if (likely(entry != 0)) { ", 297)
generated_code += add_code("            switch (entry->action.action_id) { ", 298)
generated_code += add_code("              case action_set_clone_egress_port: ", 299)
generated_code += add_code("                action_code_set_clone_egress_port(SHORT_STDPARAMS_IN, entry->action.set_clone_egress_port_params); ", 300)
generated_code += add_code("                break; ", 301)
generated_code += add_code("        } ", 302)
generated_code += add_code("      } ", 303)
generated_code += add_code("     } ", 304)
generated_code += add_code("      struct apply_result_s apply_result = { hit, hit ? entry->action.action_id : -1 }; ", 305)
generated_code += add_code("      //transfer_to_egress(STDPARAMS_IN); ", 306)
generated_code += add_code("      //control_EgressPipeImpl(STDPARAMS_IN);", 307)
generated_code += add_code("      //control_DeparserImpl(STDPARAMS_IN);", 308)
generated_code += add_code("      //emit_packet(STDPARAMS_IN);", 309)
generated_code += add_code("      ", 310)
generated_code += add_code("", 311)
                
generated_code += add_code("")
generated_code += add_code("      return apply_result; ", 313)
generated_code += add_code("  } ", 314)

generated_code += add_code("")
################################################################################ ## compiler/backend/dataplane.c.py:317

generated_code += add_code("")
generated_code += add_code(" void reset_headers(packet_descriptor_t* pd, lookup_table_t** tables) {", 318)
for h in hlir16.header_instances: ## compiler/backend/dataplane.c.py:320
    if not h.type('type_ref', lambda t: t.is_metadata): ## compiler/backend/dataplane.c.py:321
        if "tmp" in h.id: ## compiler/backend/dataplane.c.py:322
            generated_code += add_code(" pd->headers[header_instance_ethernet].pointer = NULL;", 322)
        else: ## compiler/backend/dataplane.c.py:324
            generated_code += add_code(' pd->headers[{}].pointer = NULL;'.format(h.id), 324)
            generated_code += add_code(' pd->headers[{}].var_width_field_bitwidth = 0;'.format(h.id), 325)
generated_code += add_code("     // reset metadatas", 327)
generated_code += add_code("     memset(pd->headers[header_instance_all_metadatas].pointer, 0, header_info(header_instance_all_metadatas).bytewidth * sizeof(uint8_t));", 328)
generated_code += add_code("     memset(pd->headers[header_instance_meta].pointer, 0, header_info(header_instance_meta).bytewidth * sizeof(uint8_t));", 329)
generated_code += add_code(" }", 330)

generated_code += add_code("")
generated_code += add_code(" void init_headers(packet_descriptor_t* pd, lookup_table_t** tables) {", 332)
for h in hlir16.header_instances: ## compiler/backend/dataplane.c.py:334
    if not h.type('type_ref', lambda t: t.is_metadata): ## compiler/backend/dataplane.c.py:335
        if "tmp" in h.id: ## compiler/backend/dataplane.c.py:336
            generated_code += add_code(" pd->headers[header_instance_ethernet] = (header_descriptor_t)", 336)
            generated_code += add_code(" {", 337)
            generated_code += add_code("     .type =  'header_instance_ethernet',", 338)
            generated_code += add_code("     .length = header_info(header_instance_ethernet).bytewidth,", 339)
            generated_code += add_code("     .pointer = NULL,", 340)
            generated_code += add_code("     .var_width_field_bitwidth = 0,", 341)
            generated_code += add_code(" };", 342)
        else: ## compiler/backend/dataplane.c.py:344
            generated_code += add_code(' pd->headers[{}] = (header_descriptor_t)'.format(h.id), 344)
            generated_code += add_code(" {", 345)
            generated_code += add_code('     .type = {},'.format(h.id), 346)
            generated_code += add_code('     .length = header_info({}).bytewidth,'.format(h.id), 347)
            generated_code += add_code("     .pointer = NULL,", 348)
            generated_code += add_code("     .var_width_field_bitwidth = 0,", 349)
            generated_code += add_code(" };", 350)
generated_code += add_code("     // init metadatas", 351)
generated_code += add_code("     pd->headers[header_instance_all_metadatas] = (header_descriptor_t)", 352)
generated_code += add_code("     {", 353)
generated_code += add_code("         .type = header_instance_all_metadatas,", 354)
generated_code += add_code("         .length = header_info(header_instance_all_metadatas).bytewidth,", 355)
generated_code += add_code("         .pointer = malloc(header_info(header_instance_all_metadatas).bytewidth * sizeof(uint8_t)),", 356)
generated_code += add_code("         .var_width_field_bitwidth = 0", 357)
generated_code += add_code("     };", 358)
generated_code += add_code("     // init routing_metadatas", 359)
generated_code += add_code("     pd->headers[header_instance_meta] = (header_descriptor_t)", 360)
generated_code += add_code("     {", 361)
generated_code += add_code("         .type = header_instance_meta,", 362)
generated_code += add_code("         .length = header_info(header_instance_meta).bytewidth,", 363)
generated_code += add_code("         .pointer = malloc(header_info(header_instance_meta).bytewidth * sizeof(uint8_t)),", 364)
generated_code += add_code("         .var_width_field_bitwidth = 0", 365)
generated_code += add_code("     };", 366)
generated_code += add_code(" }", 367)

generated_code += add_code("")
################################################################################ ## compiler/backend/dataplane.c.py:370

generated_code += add_code("")
def is_keyless_single_action_table(table): ## compiler/backend/dataplane.c.py:372
    return table.key_length_bytes == 0 and len(table.actions) == 2 and table.actions[1].action_object.name.startswith('NoAction') ## compiler/backend/dataplane.c.py:373
for table in hlir16.tables: ## compiler/backend/dataplane.c.py:375
    if is_keyless_single_action_table(table): ## compiler/backend/dataplane.c.py:376
        generated_code += add_code(' extern void {}_setdefault(struct {}_action);'.format(table.name, table.name), 376)
generated_code += add_code(" void init_keyless_tables() {", 378)
for table in hlir16.tables: ## compiler/backend/dataplane.c.py:380
    if is_keyless_single_action_table(table): ## compiler/backend/dataplane.c.py:381
        action = table.actions[0].action_object ## compiler/backend/dataplane.c.py:382
        generated_code += add_code(' struct {}_action {}_a;'.format(table.name, table.name), 382)
        generated_code += add_code(' {}_a.action_id = action_{};'.format(table.name, action.name), 383)
        generated_code += add_code(' {}_setdefault({}_a);'.format(table.name, table.name), 384)
generated_code += add_code(" }", 385)

generated_code += add_code("")
################################################################################ ## compiler/backend/dataplane.c.py:388

generated_code += add_code("")
generated_code += add_code(" void init_dataplane(packet_descriptor_t* pd, lookup_table_t** tables) {", 389)
generated_code += add_code("     init_headers(pd, tables);", 390)
generated_code += add_code("     reset_headers(pd, tables);", 391)
generated_code += add_code("     init_keyless_tables();", 392)

generated_code += add_code("")
generated_code += add_code("     uint32_t res32;", 394)
generated_code += add_code("     MODIFY_INT32_INT32_BITS_PACKET(pd, header_instance_all_metadatas, field_standard_metadata_t_drop, false);", 395)
generated_code += add_code(" }", 396)

generated_code += add_code("")
generated_code += add_code(" void update_packet(packet_descriptor_t* pd) {", 398)
generated_code += add_code("     uint32_t value32, res32;", 399)
generated_code += add_code("     (void)value32, (void)res32;", 400)
for hdr in hlir16.header_instances: ## compiler/backend/dataplane.c.py:402
    if not hasattr(hdr.type, 'type_ref'): ## compiler/backend/dataplane.c.py:403
        continue ## compiler/backend/dataplane.c.py:404
    generated_code += add_code(" ", 405)
    generated_code += add_code(' // updating header instance {}'.format(hdr.name), 406)
    for fld in hdr.type.type_ref.fields: ## compiler/backend/dataplane.c.py:409
        if not fld.preparsed and fld.canonical_type().size <= 32: ## compiler/backend/dataplane.c.py:410
            generated_code += add_code(' if(pd->fields.attr_field_instance_{}_{} == MODIFIED) {{'.format(hdr.name, fld.name), 410)
            generated_code += add_code('     value32 = pd->fields.field_instance_{}_{};'.format(hdr.name, fld.name), 411)
            generated_code += add_code('     MODIFY_INT32_INT32_AUTO_PACKET(pd, header_instance_all_metadatas, field_instance_{}_{}, value32);'.format(hdr.name, fld.name), 412)
            generated_code += add_code('     // set_field((fldT[]){{{{pd, header_instance_{}, field_{}_{}}}}}, 0, value32, {});'.format(hdr.name, hdr.type.type_ref.name, fld.name, fld.canonical_type().size), 413)
            generated_code += add_code(" }", 414)
generated_code += add_code(" }", 415)

generated_code += add_code("")
################################################################################ ## compiler/backend/dataplane.c.py:418
# Pipeline ## compiler/backend/dataplane.c.py:419

generated_code += add_code("")
class types: ## compiler/backend/dataplane.c.py:421
    def __init__(self, new_type_env): ## compiler/backend/dataplane.c.py:422
        global type_env ## compiler/backend/dataplane.c.py:423
        self.env_vars = set() ## compiler/backend/dataplane.c.py:424
        for v in new_type_env: ## compiler/backend/dataplane.c.py:425
            if v in type_env: ## compiler/backend/dataplane.c.py:426
                addWarning('adding a type environment', 'variable {} is already bound to type {}'.format(v, type_env[v])) ## compiler/backend/dataplane.c.py:427
            else: ## compiler/backend/dataplane.c.py:428
                self.env_vars.add(v) ## compiler/backend/dataplane.c.py:429
                type_env[v] = new_type_env[v] ## compiler/backend/dataplane.c.py:430
    def __enter__(self): ## compiler/backend/dataplane.c.py:432
        global type_env ## compiler/backend/dataplane.c.py:433
        return type_env ## compiler/backend/dataplane.c.py:434
    def __exit__(self, type, value, traceback): ## compiler/backend/dataplane.c.py:436
        global type_env ## compiler/backend/dataplane.c.py:437
        for v in self.env_vars: ## compiler/backend/dataplane.c.py:438
            del type_env[v] ## compiler/backend/dataplane.c.py:439
# forward declarations for externs ## compiler/backend/dataplane.c.py:441
for m in hlir16.objects['Method']: ## compiler/backend/dataplane.c.py:442
    # TODO temporary fix for l3-routing-full, this will be computed later on ## compiler/backend/dataplane.c.py:443
    with types({ ## compiler/backend/dataplane.c.py:444
        "T": "struct uint8_buffer_s", ## compiler/backend/dataplane.c.py:445
        "O": "unsigned", ## compiler/backend/dataplane.c.py:446
        "HashAlgorithm": "int", ## compiler/backend/dataplane.c.py:447
        "D": "uint16_t", ## compiler/backend/dataplane.c.py:448
        "M": "uint32_t", ## compiler/backend/dataplane.c.py:449
        "P": "uint32_t*", ## compiler/backend/dataplane.c.py:450
        "Q": "uint8_t*" ## compiler/backend/dataplane.c.py:451
    }): ## compiler/backend/dataplane.c.py:452
        t = m.type ## compiler/backend/dataplane.c.py:453
        ret_type = format_type(t.returnType) ## compiler/backend/dataplane.c.py:454
        args = ", ".join([format_expr(arg) for arg in t.parameters.parameters] + ['SHORT_STDPARAMS']) ## compiler/backend/dataplane.c.py:455
        argc=len(args) ## compiler/backend/dataplane.c.py:456
        generated_code += add_code(' extern {} {}_{}({});'.format(ret_type, m.name, argc, args), 456)
for ctl in p4_ctls: ## compiler/backend/dataplane.c.py:459
    generated_code += add_code(' void control_{}(STDPARAMS)'.format(ctl.name), 459)
    generated_code += add_code(" {", 460)
    generated_code += add_code('     debug("Entering control " T4LIT({},control) "...\\n");'.format(ctl.name), 461)
    generated_code += add_code("     uint32_t value32, res32;", 462)
    generated_code += add_code("     (void)value32, (void)res32;", 463)
    generated_code += add_code('     control_locals_{}_t local_vars_struct;'.format(ctl.name), 464)
    generated_code += add_code('     control_locals_{}_t* local_vars = &local_vars_struct;'.format(ctl.name), 465)
    generated_code += add_code("     pd->control_locals = (void*) local_vars;", 466)
    generated_code += str( format_statement(ctl.body, ctl)) ## compiler/backend/dataplane.c.py:467
    generated_code += add_code(" }", 468)
generated_code += add_code(" void process_packet(STDPARAMS)", 470)
generated_code += add_code(" {", 471)
it=0 ## compiler/backend/dataplane.c.py:473
for ctl in p4_ctls: ## compiler/backend/dataplane.c.py:474
    generated_code += add_code(' control_{}(STDPARAMS_IN);'.format(ctl.name), 474)
    if hlir16.p4_model == 'V1Switch' and it==1: ## compiler/backend/dataplane.c.py:476
        generated_code += add_code(" transfer_to_egress(STDPARAMS_IN);", 476)
    it = it+1; ## compiler/backend/dataplane.c.py:478
    if ctl.name == 'egress': ## compiler/backend/dataplane.c.py:479
        generated_code += add_code(" // TODO temporarily disabled", 479)
        generated_code += add_code(" // update_packet(pd); // we need to update the packet prior to calculating the new checksum", 480)
generated_code += add_code(" }", 481)

generated_code += add_code("")
################################################################################ ## compiler/backend/dataplane.c.py:484

generated_code += add_code("")
longest_hdr_name_len =max({len(h.name) for h in hlir16.header_instances if hasattr(h.type._type_ref, 'is_metadata') if not h.type._type_ref.is_metadata }) ## compiler/backend/dataplane.c.py:486

generated_code += add_code("")
pkt_name_indent = " " * longest_hdr_name_len ## compiler/backend/dataplane.c.py:488

generated_code += add_code("")
generated_code += add_code(" void store_headers_for_emit(STDPARAMS)", 489)
generated_code += add_code(" {", 490)
generated_code += add_code('     debug("   :: Preparing " T4LIT(%d) " header instances for storage...\\n", pd->emit_hdrinst_count);', 491)

generated_code += add_code("")
generated_code += add_code("     pd->emit_headers_length = 0;", 493)
generated_code += add_code("     for (int i = 0; i < pd->emit_hdrinst_count; ++i) {", 494)
generated_code += add_code("         header_descriptor_t hdr = pd->headers[pd->header_reorder[i]];", 495)

generated_code += add_code("")
generated_code += add_code("", 497)
generated_code += add_code("         #if PPK_EMIT != 1", 498)
generated_code += add_code("             if (unlikely(hdr.pointer == NULL)) {", 499)
generated_code += add_code('                 debug("        : " T4LIT(#%d) " " T4LIT(%{}s,header) "/" T4LIT(%02d) " = " T4LIT(skipping invalid header,warning) "\\n", pd->header_reorder[i] + 1, hdr.name, hdr.length);'.format(longest_hdr_name_len), 500)
generated_code += add_code("                 continue;", 501)
generated_code += add_code("             }", 502)
generated_code += add_code("         #endif", 503)

generated_code += add_code("")
generated_code += add_code("         if (likely(hdr.was_enabled_at_initial_parse)) {", 505)
generated_code += add_code('             dbg_bytes(hdr.pointer, hdr.length, "        : " T4LIT(#%d) " " T4LIT(%{}s,header) "/" T4LIT(%02d) " = %s", pd->header_reorder[i] + 1, hdr.name, hdr.length, hdr.pointer == NULL ? T4LIT((invalid),warning) " " : "");'.format(longest_hdr_name_len), 506)
generated_code += add_code("             memcpy(pd->header_tmp_storage + header_instance_infos[hdr.type].byte_offset, hdr.pointer, hdr.length);", 507)
generated_code += add_code("         } else {", 508)
generated_code += add_code('             debug("        : " T4LIT(#%d) " " T4LIT(%{}s,header) "/" T4LIT(%02d) " was created in-place (not present at ingress)\\n", pd->header_reorder[i] + 1, hdr.name, hdr.length);'.format(longest_hdr_name_len), 509)
generated_code += add_code("         }", 510)
generated_code += add_code("", 511)
generated_code += add_code("         pd->emit_headers_length += hdr.length;", 512)
generated_code += add_code("     }", 513)
generated_code += add_code(" }", 514)

generated_code += add_code("")
generated_code += add_code(" void resize_packet_on_emit(STDPARAMS)", 516)
generated_code += add_code(" {", 517)
generated_code += add_code("      #if PPK_VLAN", 518)
generated_code += add_code("          pd->parsed_length -= 4;", 519)
generated_code += add_code("      #endif", 520)
generated_code += add_code("     if (likely(pd->emit_headers_length == pd->parsed_length)) {", 521)
generated_code += add_code("         debug(\" \" T4LIT(::::,status) \" Skipping packet resizing: no change in total packet header length\\n\");", 522)
generated_code += add_code("         return;", 523)
generated_code += add_code("     }", 524)
generated_code += add_code("", 525)
generated_code += add_code("     if (likely(pd->emit_headers_length > pd->parsed_length)) {", 526)
generated_code += add_code("         int len_change = pd->emit_headers_length - pd->parsed_length;", 527)
generated_code += add_code('         debug("   " T4LIT(::,status) " Adding   " T4LIT(%02d) " bytes %{}s   : (header: from " T4LIT(%d) " bytes to " T4LIT(%d) " bytes)\\n", len_change, "to packet", pd->parsed_length, pd->emit_headers_length);'.format(longest_hdr_name_len), 528)
generated_code += add_code("         char* new_ptr = rte_pktmbuf_prepend(pd->wrapper, len_change);", 529)
generated_code += add_code("         if (unlikely(new_ptr == 0)) {", 530)
generated_code += add_code('             rte_exit(1, "Could not reserve necessary headroom (" T4LIT(%d) " additional bytes)", len_change);', 531)
generated_code += add_code("         }", 532)
generated_code += add_code("         pd->data = (packet_data_t*)new_ptr;", 533)
generated_code += add_code("     } else {", 534)
generated_code += add_code("         int len_change = pd->parsed_length - pd->emit_headers_length;", 535)
generated_code += add_code('         debug("   " T4LIT(::,status) " Removing " T4LIT(%02d) " bytes %{}s  : (header: from " T4LIT(%d) " bytes to " T4LIT(%d) " bytes)\\n", len_change, "from packet", pd->parsed_length, pd->emit_headers_length);'.format(longest_hdr_name_len), 536)
generated_code += add_code("         char* new_ptr = rte_pktmbuf_adj(pd->wrapper, len_change);", 537)
generated_code += add_code("         pd->data = (packet_data_t*)new_ptr;", 538)
generated_code += add_code("     }", 539)
generated_code += add_code("      #if PPK_VLAN", 540)
generated_code += add_code("          pd->wrapper->pkt_len = pd->emit_headers_length + pd->payload_length + 4;", 541)
generated_code += add_code("     #else", 542)
generated_code += add_code("          pd->wrapper->pkt_len = pd->emit_headers_length + pd->payload_length;", 543)
generated_code += add_code("      #endif", 544)
generated_code += add_code(" }", 545)

generated_code += add_code("")
generated_code += add_code(" // if (some of) the emitted headers are one after another, this function copies them in one go", 547)
generated_code += add_code(" void copy_emit_contents(STDPARAMS)", 548)
generated_code += add_code(" {", 549)
generated_code += add_code("     debug(\"   :: Putting together packet\\n\");", 550)
generated_code += add_code("     uint8_t* dst_start = rte_pktmbuf_mtod(pd->wrapper, uint8_t*);", 551)
generated_code += add_code("     uint8_t* dst = dst_start;", 552)
generated_code += add_code("     for (int idx = 0; idx < pd->emit_hdrinst_count; ) {", 553)
generated_code += add_code("             if (pd->headers[pd->header_reorder[idx]].pointer == NULL){", 554)
generated_code += add_code("             idx++;", 555)
generated_code += add_code("             continue;", 556)
generated_code += add_code("         }", 557)
generated_code += add_code("         #ifdef PPK_DEBUG", 558)
generated_code += add_code("             char header_names_txt[1024];", 559)
generated_code += add_code("             char* header_names_ptr = header_names_txt;", 560)
generated_code += add_code("         #endif", 561)
generated_code += add_code("         header_descriptor_t hdr = pd->headers[pd->header_reorder[idx]];", 562)
generated_code += add_code("         uint8_t* copy_start     = NULL;", 563)
generated_code += add_code("         if (likely(hdr.was_enabled_at_initial_parse)){", 564)
generated_code += add_code("             copy_start     = pd->header_tmp_storage + header_instance_infos[hdr.type].byte_offset;", 565)
generated_code += add_code("         }else {", 566)
generated_code += add_code("             copy_start     = hdr.pointer;", 567)
generated_code += add_code("         }", 568)
generated_code += add_code("         int copy_start_idx      = idx;", 569)
generated_code += add_code("         int copy_length         = hdr.length;", 570)
generated_code += add_code("         int count               = 1;", 571)
generated_code += add_code("         #ifdef PPK_DEBUG", 572)
generated_code += add_code("             header_names_ptr += sprintf(header_names_ptr, \" \" T4LIT(%s,header), hdr.name);", 573)
generated_code += add_code("         #endif", 574)
generated_code += add_code("         ++idx;", 575)
generated_code += add_code("         while (idx < pd->emit_hdrinst_count && pd->headers[pd->header_reorder[idx]].pointer == hdr.pointer + hdr.length) {", 576)
generated_code += add_code("             ++count;", 577)
generated_code += add_code("             hdr = pd->headers[pd->header_reorder[idx]];", 578)
generated_code += add_code("             copy_length += hdr.length;", 579)
generated_code += add_code("             ++idx;", 580)
generated_code += add_code("             #ifdef PPK_DEBUG", 581)
generated_code += add_code("                 header_names_ptr += sprintf(header_names_ptr, \" \" T4LIT(%s,header), hdr.name);", 582)
generated_code += add_code("             #endif", 583)
generated_code += add_code("         }", 584)
generated_code += add_code("         dbg_bytes(copy_start, copy_length, \"    : Copying \" T4LIT(%d) \" %s to byte \" T4LIT(#%ld) \" of egress header, \" T4LIT(%d) \" bytes: %s: \", count, count == 1 ? \"header\" : \"adjacent headers\", dst - dst_start, copy_length, header_names_txt);", 585)
generated_code += add_code("         memcpy(dst, copy_start, copy_length);", 586)
generated_code += add_code("         dst += copy_length;", 587)
generated_code += add_code("      #if PPK_VLAN", 588)
generated_code += add_code("          if(idx <= 1 && copy_length ==14){", 589)
generated_code += add_code("              dst += 4;", 590)
generated_code += add_code("          }", 591)
generated_code += add_code("      #endif", 592)
generated_code += add_code("     }", 593)
generated_code += add_code(" }", 594)

generated_code += add_code("")
generated_code += add_code(" void emit_packet(STDPARAMS)", 596)
generated_code += add_code(" {", 597)
generated_code += add_code("     if (unlikely(pd->is_emit_reordering)) {", 598)
generated_code += add_code("         if (unlikely(GET_INT32_AUTO_PACKET(pd, header_instance_all_metadatas, field_standard_metadata_t_drop))) {", 599)
generated_code += add_code("             debug(\" \" T4LIT(::::,status) \" Skipping pre-emit processing: packet is \" T4LIT(dropped,status) \"\\n\");", 600)
generated_code += add_code("             return;", 601)
generated_code += add_code("         }", 602)
generated_code += add_code("         debug(\" :::: Pre-emit reordering\\n\");", 603)
generated_code += add_code("         store_headers_for_emit(STDPARAMS_IN);", 604)
generated_code += add_code("         resize_packet_on_emit(STDPARAMS_IN);", 605)
generated_code += add_code("         copy_emit_contents(STDPARAMS_IN);", 606)
generated_code += add_code("     } else {", 607)
generated_code += add_code("         debug(\" \" T4LIT(::::,status) \" Skipping pre-emit processing: no change in packet header structure\\n\");", 608)
generated_code += add_code("     }", 609)
generated_code += add_code(" }", 610)

generated_code += add_code("")
generated_code += add_code(" void handle_packet(STDPARAMS, uint32_t portid)", 612)
generated_code += add_code(" {", 613)
generated_code += add_code("     init_headers(clone_pd, tables);", 614)
generated_code += add_code("     reset_headers(clone_pd, tables);", 615)
generated_code += add_code("     int value32;", 616)
generated_code += add_code("     int res32;", 617)
generated_code += add_code("     ", 618)
generated_code += add_code("     reset_headers(pd, tables);", 619)
generated_code += add_code("     set_handle_packet_metadata(pd, portid);", 620)
generated_code += add_code("", 621)
generated_code += add_code('     dbg_bytes(pd->data, packet_length(pd), "Handling packet (port " T4LIT(%d,port) ", " T4LIT(%02d) " bytes)  : ", extract_ingress_port(pd), packet_length(pd));', 622)
generated_code += add_code("", 623)
generated_code += add_code("     pd->parsed_length = 0;", 624)
generated_code += add_code("     parse_packet(pd, tables, pstate);", 625)
generated_code += add_code("", 626)
generated_code += add_code("     emit_addr = pd->data;", 627)
generated_code += add_code("     pd->emit_hdrinst_count = 0;", 628)
generated_code += add_code("     pd->is_emit_reordering = false;", 629)
generated_code += add_code("", 630)
generated_code += add_code("     process_packet(STDPARAMS_IN);", 631)
generated_code += add_code("", 632)
generated_code += add_code("     //if(GET_INT32_AUTO_PACKET(pd, header_instance_all_metadatas, field_standard_metadata_t_instance_type) == 0) ", 633)
generated_code += add_code("     emit_packet(STDPARAMS_IN);", 634)
generated_code += add_code(" }", 635)

generated_code += add_code("")
generated_code += add_code(" void handle_clone_packet(STDPARAMS, uint32_t portid)", 637)
generated_code += add_code(" {", 638)
generated_code += add_code("     int value32;", 639)
generated_code += add_code("     int res32;", 640)
generated_code += add_code("      ", 641)
generated_code += add_code("     //init_headers(SHORT_STDPARAMS_IN);", 642)
generated_code += add_code("     set_handle_packet_metadata(pd, portid);", 643)
generated_code += add_code("     //MODIFY_INT32_INT32_BITS_PACKET(pd, header_instance_all_metadatas, field_instance_standard_metadata_instance_type, 1);", 644)
generated_code += add_code('     dbg_bytes(pd->data, packet_length(pd), "\\nHandling-- clone --packet (port " T4LIT(%d,port) ", " T4LIT(%02d) " bytes)  : ", extract_ingress_port(pd), packet_length(pd));', 645)
generated_code += add_code("", 646)
generated_code += add_code("     pd->parsed_length = 0;", 647)
generated_code += add_code("     parse_packet(pd, tables, pstate);", 648)
generated_code += add_code("     //debug(\"\\nHandling-- clone --packet ----- \\n\");", 649)
generated_code += add_code("     emit_addr = pd->data;", 650)
generated_code += add_code("     pd->emit_hdrinst_count = 0;", 651)
generated_code += add_code("     pd->is_emit_reordering = false;", 652)
generated_code += add_code("     ", 653)
it=0 ## compiler/backend/dataplane.c.py:655
for ctl in p4_ctls: ## compiler/backend/dataplane.c.py:656
    if it > 1: ## compiler/backend/dataplane.c.py:657
        generated_code += add_code('      control_{}(STDPARAMS_IN);'.format(ctl.name), 657)
    if hlir16.p4_model == 'V1Switch' and it==1: ## compiler/backend/dataplane.c.py:659
        generated_code += add_code("      transfer_to_egress(STDPARAMS_IN);", 659)
    it = it+1 ## compiler/backend/dataplane.c.py:661
generated_code += add_code("     emit_packet(STDPARAMS_IN);", 661)
generated_code += add_code(" }", 662)
