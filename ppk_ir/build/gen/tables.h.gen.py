
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from compiler/backend/tables.h.py), do not modify directly.
# Generator: PPK

global file_indentation_level
file_indentation_level = 0

# The last element is the innermost (current) style.
file_sugar_style = ['line_comment']


def add_code(line, lineno = None, file = "compiler/backend/tables.h.py"):
    global file_indentation_level
    global file_sugar_style
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
    }

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = '    ' * file_indentation_level
    return indent + line + sugar(no_sugar_on_line, file, lineno) + line_ends[file_sugar_style[-1]]


class SugarStyle():
    def __init__(self, sugar):
        global file_sugar_style
        file_sugar_style.append(sugar)

    def __enter__(self):
        global file_sugar_style
        return file_sugar_style[-1]

    def __exit__(self, type, value, traceback):
        global file_sugar_style
        file_sugar_style.pop()


def sugar(no_sugar_on_line, file, lineno):
    if no_sugar_on_line or file is None or lineno is None:
        return ""

    import re
    global file_sugar_style

    if file_sugar_style[-1] == 'line_comment':
        if no_sugar_on_line:
            return ""
        return " // {}:{}".format(file, lineno)
    if file_sugar_style[-1] == 'inline_comment':
        if file == "../compiler/backend/tables.h.py":
            return " /* {} */ {}".format(lineno)
        return " /* {}:{} */".format(file, lineno)
    return line


generated_code += "// Autogenerated file (from compiler/backend/tables.h.py via ../compiler/backend/tables.h.py), do not modify directly.\n"
generated_code += "// Generator: PPK\n"
generated_code += "\n"

# Copyright 2018 Eotvos Lorand University, Budapest, Hungary ## compiler/backend/tables.h.py:2
#  ## compiler/backend/tables.h.py:3
# Licensed under the Apache License, Version 2.0 (the "License"); ## compiler/backend/tables.h.py:4
# you may not use this file except in compliance with the License. ## compiler/backend/tables.h.py:5
# You may obtain a copy of the License at ## compiler/backend/tables.h.py:6
#  ## compiler/backend/tables.h.py:7
#     http://www.apache.org/licenses/LICENSE-2.0 ## compiler/backend/tables.h.py:8
#  ## compiler/backend/tables.h.py:9
# Unless required by applicable law or agreed to in writing, software ## compiler/backend/tables.h.py:10
# distributed under the License is distributed on an "AS IS" BASIS, ## compiler/backend/tables.h.py:11
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. ## compiler/backend/tables.h.py:12
# See the License for the specific language governing permissions and ## compiler/backend/tables.h.py:13
# limitations under the License. ## compiler/backend/tables.h.py:14

generated_code += add_code("")
generated_code += add_code(" #ifndef __TABLES_H__", 15)
generated_code += add_code(" #define __TABLES_H__", 16)

generated_code += add_code("")
generated_code += add_code(" #include \"stateful_memory.h\"", 18)
generated_code += add_code(" #include \"actions.h\"", 19)

generated_code += add_code("")
generated_code += add_code(" typedef bool entry_validity_t;", 21)

generated_code += add_code("")
for t in hlir16.tables: ## compiler/backend/tables.h.py:24
    generated_code += add_code(' typedef struct table_entry_{}_s {{'.format(t.name), 24)
    generated_code += add_code('     struct {}_action  action;'.format(t.name), 25)
    generated_code += add_code("     entry_validity_t         is_entry_valid;", 26)
    generated_code += add_code(' }} table_entry_{}_t;'.format(t.name), 27)
generated_code += add_code("  typedef struct table_entry_multicast_group_table_s { ", 28)
generated_code += add_code("      struct multicast_group_table_action  action; ", 29)
generated_code += add_code("     entry_validity_t         is_entry_valid; ", 30)
generated_code += add_code(" } table_entry_multicast_group_table_t; ", 31)
generated_code += add_code(" typedef struct table_entry_clone_session_table_s { ", 32)
generated_code += add_code("     struct clone_session_table_action  action; ", 33)
generated_code += add_code("     entry_validity_t         is_entry_valid; ", 34)
generated_code += add_code(" } table_entry_clone_session_table_t; ", 35)

generated_code += add_code("")
generated_code += add_code(' #define NB_TABLES {}'.format(len(hlir16.tables)+2), 38)

generated_code += add_code("")
generated_code += add_code(" enum table_names {", 40)
for table in hlir16.tables: ## compiler/backend/tables.h.py:42
    generated_code += add_code(' TABLE_{},'.format(table.name), 42)
generated_code += add_code(" TABLE_multicast_group_table,", 43)
generated_code += add_code(" TABLE_clone_session_table,", 44)
generated_code += add_code(" TABLE_,", 45)
generated_code += add_code(" };", 46)

generated_code += add_code("")
generated_code += add_code(" #endif", 48)
