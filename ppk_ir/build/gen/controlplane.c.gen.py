
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from compiler/backend/controlplane.c.py), do not modify directly.
# Generator: PPK

global file_indentation_level
file_indentation_level = 0

# The last element is the innermost (current) style.
file_sugar_style = ['line_comment']


def add_code(line, lineno = None, file = "compiler/backend/controlplane.c.py"):
    global file_indentation_level
    global file_sugar_style
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
    }

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = '    ' * file_indentation_level
    return indent + line + sugar(no_sugar_on_line, file, lineno) + line_ends[file_sugar_style[-1]]


class SugarStyle():
    def __init__(self, sugar):
        global file_sugar_style
        file_sugar_style.append(sugar)

    def __enter__(self):
        global file_sugar_style
        return file_sugar_style[-1]

    def __exit__(self, type, value, traceback):
        global file_sugar_style
        file_sugar_style.pop()


def sugar(no_sugar_on_line, file, lineno):
    if no_sugar_on_line or file is None or lineno is None:
        return ""

    import re
    global file_sugar_style

    if file_sugar_style[-1] == 'line_comment':
        if no_sugar_on_line:
            return ""
        return " // {}:{}".format(file, lineno)
    if file_sugar_style[-1] == 'inline_comment':
        if file == "../compiler/backend/controlplane.c.py":
            return " /* {} */ {}".format(lineno)
        return " /* {}:{} */".format(file, lineno)
    return line


generated_code += "// Autogenerated file (from compiler/backend/controlplane.c.py via ../compiler/backend/controlplane.c.py), do not modify directly.\n"
generated_code += "// Generator: PPK\n"
generated_code += "\n"

# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## compiler/backend/controlplane.c.py:2
#  ## compiler/backend/controlplane.c.py:3
# Licensed under the Apache License, Version 2.0 (the "License"); ## compiler/backend/controlplane.c.py:4
# you may not use this file except in compliance with the License. ## compiler/backend/controlplane.c.py:5
# You may obtain a copy of the License at ## compiler/backend/controlplane.c.py:6
#  ## compiler/backend/controlplane.c.py:7
#     http://www.apache.org/licenses/LICENSE-2.0 ## compiler/backend/controlplane.c.py:8
#  ## compiler/backend/controlplane.c.py:9
# Unless required by applicable law or agreed to in writing, software ## compiler/backend/controlplane.c.py:10
# distributed under the License is distributed on an "AS IS" BASIS, ## compiler/backend/controlplane.c.py:11
# WITHOUT WARRANTIES OR CONDITIO-NS OF ANY KIND, either express or implied. ## compiler/backend/controlplane.c.py:12
# See the License for the specific language governing permissions and ## compiler/backend/controlplane.c.py:13
# limitations under the License. ## compiler/backend/controlplane.c.py:14

generated_code += add_code("")
def match_type_order(t): ## compiler/backend/controlplane.c.py:16
    match_types = { ## compiler/backend/controlplane.c.py:17
        "exact":    0, ## compiler/backend/controlplane.c.py:18
        "lpm":      1, ## compiler/backend/controlplane.c.py:19
        "ternary":  2, ## compiler/backend/controlplane.c.py:20
    } ## compiler/backend/controlplane.c.py:21
    return match_types[t] ## compiler/backend/controlplane.c.py:22
generated_code += add_code(" #include \"dpdk_lib.h\"", 23)
generated_code += add_code(" #include \"actions.h\"", 24)
generated_code += add_code(" #include \"tables.h\"", 25)

generated_code += add_code("")
generated_code += add_code(" #include \"PI/proto/pi_server.h\"", 27)
generated_code += add_code(" #include \"p4rt/device_mgr.h\"", 28)

generated_code += add_code("")
generated_code += add_code(" #define member_size(type, member) sizeof(((type *)0)->member)", 30)

generated_code += add_code("")
generated_code += add_code(" extern void table_setdefault_promote  (int tableid, uint8_t* value);", 32)
generated_code += add_code(" extern void exact_add_promote  (int tableid, uint8_t* key, uint8_t* value, bool should_print);", 33)
generated_code += add_code(" extern void lpm_add_promote    (int tableid, uint8_t* key, uint8_t depth, uint8_t* value, bool should_print);", 34)
generated_code += add_code(" extern void ternary_add_promote(int tableid, uint8_t* key, uint8_t* mask, uint16_t priority, uint8_t* value, bool should_print);", 35)

generated_code += add_code("")
generated_code += add_code(" extern void exact_delete_promote(int tableid, uint8_t* key, bool should_print);", 37)
generated_code += add_code(" extern void lpm_delete_promote(int tableid, uint8_t* key, uint8_t depth, bool should_print);", 38)
generated_code += add_code(" extern void ternary_delete_promote(int tableid, uint8_t* key, bool should_print);", 39)

generated_code += add_code("")
generated_code += add_code(" extern void exact_lookup_promote(int tableid, uint8_t* key, bool should_print);", 41)
generated_code += add_code(" extern void lpm_lookup_promote(int tableid, uint8_t* key, bool should_print);", 42)

generated_code += add_code("")
generated_code += add_code(" extern device_mgr_t *dev_mgr_ptr;", 45)

generated_code += add_code("")
generated_code += add_code(" extern all_metadatas_t all_metadatas; //l3要用", 47)
generated_code += add_code(" FILE *fp3;", 48)

generated_code += add_code("")
# TODO by Ian  ## compiler/backend/controlplane.c.py:51
generated_code += add_code(" extern void send_burst_from_controller(struct p4_ctrl_msg* ctrl_m);", 51)
generated_code += add_code(" extern void send_packetout_from_controller(struct p4_ctrl_msg* ctrl_m);", 52)
generated_code += add_code(" extern void async_packetin_data(uint8_t* data, int len);", 53)

generated_code += add_code("")
def unique_stable(items): ## compiler/backend/controlplane.c.py:56
    """Returns only the first occurrence of the items in a list. Equivalent to unique_everseen from Python3.""" ## compiler/backend/controlplane.c.py:57
    from collections import OrderedDict ## compiler/backend/controlplane.c.py:58
    return list(OrderedDict.fromkeys(items)) ## compiler/backend/controlplane.c.py:59
# TODO is there a more appropriate source for this than the annotation? ## compiler/backend/controlplane.c.py:61
def get_action_name_str(action): ## compiler/backend/controlplane.c.py:62
    name_parts = action.action_object.annotations.annotations.get('name').expr[0].value ## compiler/backend/controlplane.c.py:63
    if name_parts.rsplit(".")[0] == '': ## compiler/backend/controlplane.c.py:64
        return name_parts.rsplit(".")[-1] ## compiler/backend/controlplane.c.py:65
    else: ## compiler/backend/controlplane.c.py:66
        return name_parts ## compiler/backend/controlplane.c.py:67
def get_table_name_str(table): ## compiler/backend/controlplane.c.py:69
    for action in table.actions: ## compiler/backend/controlplane.c.py:70
        name_parts = action.action_object.annotations.annotations.get('name').expr[0].value ## compiler/backend/controlplane.c.py:71
        if name_parts.rsplit(".")[0] == '': ## compiler/backend/controlplane.c.py:72
            continue ## compiler/backend/controlplane.c.py:73
        else: ## compiler/backend/controlplane.c.py:74
            return name_parts.rsplit(".")[0] + '.' + table.name + '_0' ## compiler/backend/controlplane.c.py:75
generated_code += add_code(" void ctrl_get_counter_entries(char *counter_name,uint32_t index, uint32_t *packets, uint32_t *bytes) {", 77)
generated_code += add_code(" extern void extern_counter_read(counter_t*, int, uint32_t*);", 78)
for smem in unique_stable([smem for table, smem in hlir16.all_meters + hlir16.all_counters if smem.smem_type not in ["direct_counter", "direct_meter"]]): ## compiler/backend/controlplane.c.py:80
    table = None ## compiler/backend/controlplane.c.py:81
    generated_code += add_code(' if(strstr("c_ingress.{}", counter_name)) {{'.format(smem.name), 81)
    for c in smem.components: ## compiler/backend/controlplane.c.py:83
        cname = c['name'] ## compiler/backend/controlplane.c.py:84
        ctype = c['type'] ## compiler/backend/controlplane.c.py:85
        generated_code += add_code(' //printf("{}, cname: {}, smem_type: {}\\n");'.format(smem.type._baseType.path.name, cname, smem.smem_type), 85)
        if (smem.smem_type == "register") or table != None: ## compiler/backend/controlplane.c.py:87
            continue ## compiler/backend/controlplane.c.py:88
        else: ## compiler/backend/controlplane.c.py:89
            if "packets" in cname: ## compiler/backend/controlplane.c.py:90
                generated_code += add_code(' extern_counter_read(&(global_smem.{}[index - 1]), index, packets);'.format(cname), 90)
            else: ## compiler/backend/controlplane.c.py:92
                generated_code += add_code(' extern_counter_read(&(global_smem.{}[index - 1]), index, bytes);'.format(cname), 92)
    generated_code += add_code(" }", 93)
generated_code += add_code("}", 96)

generated_code += add_code("")
generated_code += add_code(" void ctrl_modify_counter_entries(char *counter_name, uint64_t index, uint32_t packets, uint32_t bytes) {", 98)
generated_code += add_code(" extern void extern_counter_set(counter_t*, int, uint32_t);", 99)
for smem in unique_stable([smem for table, smem in hlir16.all_meters + hlir16.all_counters if smem.smem_type not in ["direct_counter", "direct_meter"]]): ## compiler/backend/controlplane.c.py:101
    table = None ## compiler/backend/controlplane.c.py:102
    generated_code += add_code(' if(strstr("c_ingress.{}", counter_name)) {{'.format(smem.name), 102)
    for c in smem.components: ## compiler/backend/controlplane.c.py:104
        cname = c['name'] ## compiler/backend/controlplane.c.py:105
        ctype = c['type'] ## compiler/backend/controlplane.c.py:106
        if (smem.smem_type == "register") or table != None: ## compiler/backend/controlplane.c.py:107
            continue ## compiler/backend/controlplane.c.py:108
        else: ## compiler/backend/controlplane.c.py:109
            if "packets" in cname: ## compiler/backend/controlplane.c.py:110
                generated_code += add_code(' extern_counter_set(&(global_smem.{}[index - 1]), index, packets);'.format(cname), 110)
            else: ## compiler/backend/controlplane.c.py:113
                generated_code += add_code(' extern_counter_set(&(global_smem.{}[index - 1]), index, bytes);'.format(cname), 113)
    generated_code += add_code(" }", 114)
generated_code += add_code("}", 116)

generated_code += add_code("")
generated_code += add_code(" void ctrl_get_direct_counter_entries(char *table_name, uint32_t *packets, uint32_t *bytes) {", 118)
for table in hlir16.tables: ## compiler/backend/controlplane.c.py:120
    if hasattr(table, 'direct_counters'): ## compiler/backend/controlplane.c.py:121
        table_name_str = get_table_name_str(table) ## compiler/backend/controlplane.c.py:122
        generated_code += add_code(' if(strcmp("{}", table_name) == 0){{'.format(table_name_str), 122)
        generated_code += add_code(" //printf(\"%s:%d\\n\", __FUNCTION__, __LINE__);", 123)
        for smem in table.direct_meters + table.direct_counters: ## compiler/backend/controlplane.c.py:125
            for comp in smem.components: ## compiler/backend/controlplane.c.py:126
                value = "pd->parsed_length" if comp['for'] == 'bytes' else "1" ## compiler/backend/controlplane.c.py:127
                type = comp['type'] ## compiler/backend/controlplane.c.py:128
                name = comp['name'] ## compiler/backend/controlplane.c.py:129
                generated_code += add_code(' extern void read_{}({}_t*, const char*, const char*, const char*, int*);'.format(smem.smem_type, smem.smem_type), 129)
                if 'packets' in name: ## compiler/backend/controlplane.c.py:131
                    generated_code += add_code(' read_{}(&(global_smem.{}_{}), "{}", "{}", "{}", packets);'.format(smem.smem_type, name, table.name, table.name, smem.smem_type, name), 131)
                else: ## compiler/backend/controlplane.c.py:134
                    generated_code += add_code(' read_{}(&(global_smem.{}_{}), "{}", "{}", "{}", bytes);'.format(smem.smem_type, name, table.name, table.name, smem.smem_type, name), 134)
        generated_code += add_code(" }", 135)
generated_code += add_code("}", 136)

generated_code += add_code("")
generated_code += add_code(" void ctrl_modify_direct_counter_entries(char *table_name, uint64_t packets, uint64_t bytes) {", 138)
for table in hlir16.tables: ## compiler/backend/controlplane.c.py:140
    if hasattr(table, 'direct_counters'): ## compiler/backend/controlplane.c.py:141
        table_name_str = get_table_name_str(table) ## compiler/backend/controlplane.c.py:142
        generated_code += add_code(' if(strcmp("{}", table_name) == 0) {{'.format(table_name_str), 142)
        generated_code += add_code(" //printf(\"%s:%d\\n\", __FUNCTION__, __LINE__);", 143)
        for smem in table.direct_meters + table.direct_counters: ## compiler/backend/controlplane.c.py:145
            for comp in smem.components: ## compiler/backend/controlplane.c.py:146
                type = comp['type'] ## compiler/backend/controlplane.c.py:147
                name = comp['name'] ## compiler/backend/controlplane.c.py:148
                generated_code += add_code(' extern void set_{}({}_t*, int, const char*, const char*, const char*);'.format(smem.smem_type, smem.smem_type), 148)
                if 'packets' in name: ## compiler/backend/controlplane.c.py:150
                    generated_code += add_code(' set_{}(&(global_smem.{}_{}), packets, "{}", "{}", "{}");'.format(smem.smem_type, name, table.name, table.name, smem.smem_type, name), 150)
                else: ## compiler/backend/controlplane.c.py:152
                    generated_code += add_code(' set_{}(&(global_smem.{}_{}), bytes, "{}", "{}", "{}");'.format(smem.smem_type, name, table.name, table.name, smem.smem_type, name), 152)
        generated_code += add_code(" }", 153)
generated_code += add_code("}", 154)

generated_code += add_code("")
generated_code += add_code(" void ctrl_direct_counter_handle(struct p4_ctrl_counter* ctrl_c) {", 156)
generated_code += add_code(" if (ctrl_c->type == P4T_MODIFY_COUNTER_ENTRY) {", 157)
generated_code += add_code(" ctrl_modify_direct_counter_entries(ctrl_c->table_name, ctrl_c->packets, ctrl_c->bytes);", 158)
generated_code += add_code(" } else if(ctrl_c->type == P4T_GET_COUNTER_ENTRIES){", 159)
generated_code += add_code(" ctrl_get_direct_counter_entries(ctrl_c->table_name, &(ctrl_c->packets), &(ctrl_c->bytes));", 160)
generated_code += add_code(" }", 161)
generated_code += add_code("}", 162)

generated_code += add_code("")
generated_code += add_code(" void ctrl_counter_handle(struct p4_ctrl_counter* ctrl_c) {", 164)
generated_code += add_code(" if (ctrl_c->type == P4T_MODIFY_COUNTER_ENTRY) {", 165)
generated_code += add_code(" ctrl_modify_counter_entries(ctrl_c->counter_name, ctrl_c->index, ctrl_c->packets, ctrl_c->bytes);", 166)
generated_code += add_code(" }else if(ctrl_c->type == P4T_GET_COUNTER_ENTRIES){", 167)
generated_code += add_code(" //printf(\"ctrl_counter_handle\\n\");", 168)
generated_code += add_code(" ctrl_get_counter_entries(ctrl_c->counter_name, ctrl_c->index, &(ctrl_c->packets), &(ctrl_c->bytes));", 169)
generated_code += add_code(" }", 170)
generated_code += add_code("}", 171)

generated_code += add_code("")
generated_code += add_code(" void ctrl_all_counter_handle(struct p4_ctrl_counter* ctrl_c) {", 174)
generated_code += add_code(" if (ctrl_c->is_direct){", 175)
generated_code += add_code("   //printf(\"ctrl_all_counter_handle1\\n\");", 176)
generated_code += add_code("   ctrl_direct_counter_handle(ctrl_c);", 177)
generated_code += add_code(" }else{", 178)
generated_code += add_code("   //printf(\"ctrl_all_counter_handle2\\n\");", 179)
generated_code += add_code("   ctrl_counter_handle(ctrl_c);", 180)
generated_code += add_code("}", 181)
generated_code += add_code("}", 182)

generated_code += add_code("")
for table in hlir16.tables: ## compiler/backend/controlplane.c.py:185
    generated_code += add_code(' extern void table_{}_key(packet_descriptor_t* pd, uint8_t* key); // defined in dataplane.c'.format(table.name), 185)
if len(hlir16.tables)>0: ## compiler/backend/controlplane.c.py:189
    max_bytes = max([t.key_length_bytes for t in hlir16.tables if hasattr(t, 'key')]) ## compiler/backend/controlplane.c.py:190
    generated_code += add_code(' uint8_t reverse_buffer[{}];'.format(max_bytes), 190)
# Variable width fields are not supported ## compiler/backend/controlplane.c.py:193
def get_key_byte_width(k): ## compiler/backend/controlplane.c.py:194
    # for special functions like isValid ## compiler/backend/controlplane.c.py:195
    if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:196
        return 0 ## compiler/backend/controlplane.c.py:197
    return (k.width+7)/8 if not k.header.type.type_ref.is_vw else 0 ## compiler/backend/controlplane.c.py:199
hlir16_tables_with_keys = [t for t in hlir16.tables if hasattr(t, 'key')] ## compiler/backend/controlplane.c.py:202
keyed_table_names = ", ".join(["\"T4LIT(" + table.name + ",table)\"" for table in hlir16_tables_with_keys]) ## compiler/backend/controlplane.c.py:203

generated_code += add_code("")
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:206
    generated_code += add_code(' // note: {}, {}, {}'.format(table.name, table.match_type, table.key_length_bytes), 206)
    generated_code += add_code(' void {}_add('.format(table.name), 207)
    for k in table.key.keyElements: ## compiler/backend/controlplane.c.py:209
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:210
            continue ## compiler/backend/controlplane.c.py:211
        # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:212
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:213
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:214
                continue ## compiler/backend/controlplane.c.py:215
        if k.header_name=='meta': ## compiler/backend/controlplane.c.py:217
            byte_width = 'member_size(all_metadatas_t, field_metadata_%s)' % k.field_name ## compiler/backend/controlplane.c.py:218
            generated_code += add_code(' uint8_t field_instance_{}_{}[{}], '.format(k.header_name, k.field_name, byte_width), 218)
        else: ## compiler/backend/controlplane.c.py:220
            byte_width = get_key_byte_width(k) ## compiler/backend/controlplane.c.py:221
            generated_code += add_code(' uint8_t field_instance_{}_{}[{}],'.format(k.header.name, k.field_name, byte_width), 221)
        # TODO have keys' and tables' match_type the same case (currently: LPM vs lpm) ## compiler/backend/controlplane.c.py:224
        if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:225
            generated_code += add_code(' uint8_t field_instance_{}_{}_mask[{}],'.format(k.header.name, k.field_name, byte_width), 225)
        if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:227
            generated_code += add_code(' uint8_t field_instance_{}_{}_prefix_length,'.format(k.header.name, k.field_name), 227)
    if table.match_type == "TERNARY": ## compiler/backend/controlplane.c.py:229
        generated_code += add_code(" uint16_t priority,", 229)
    generated_code += add_code('     struct {}_action action)'.format(table.name), 230)
    generated_code += add_code(" {", 231)
    if table.key_length_bytes==0:  # TODO: Check this part!!! ## compiler/backend/controlplane.c.py:233
        if len(table.key.keyElements) == 0: ## compiler/backend/controlplane.c.py:234
            generated_code += add_code("     uint8_t key[0];", 234)
        elif table.key.keyElements[0].header_name=='meta': ## compiler/backend/controlplane.c.py:236
            generated_code += add_code('     uint8_t key[member_size(all_metadatas_t, field_metadata_{})];'.format(table.key.keyElements[0].field_name), 236)
    else: ## compiler/backend/controlplane.c.py:238
         generated_code += add_code('     uint8_t key[{}];'.format(table.key_length_bytes), 238)
    byte_idx = 0 ## compiler/backend/controlplane.c.py:241
    for k in sorted((k for k in table.key.keyElements if k.get_attr('match_type') is not None), key = lambda k: match_type_order(k.match_type)): ## compiler/backend/controlplane.c.py:242
        # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:243
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:244
            continue ## compiler/backend/controlplane.c.py:245
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:246
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:247
                continue ## compiler/backend/controlplane.c.py:248
        if k.header_name=='meta': ## compiler/backend/controlplane.c.py:249
            byte_width = 'member_size(all_metadatas_t, field_metadata_%s)' % k.field_name ## compiler/backend/controlplane.c.py:250
            generated_code += add_code(' memcpy(key+{}, field_instance_{}_{}, {});'.format(byte_idx, k.header_name, k.field_name, byte_width), 250)
            byte_idx += get_key_byte_width(k) # Metafield size??? ## compiler/backend/controlplane.c.py:252
        else: ## compiler/backend/controlplane.c.py:253
            byte_width = get_key_byte_width(k) ## compiler/backend/controlplane.c.py:254
            generated_code += add_code(' memcpy(key+{}, field_instance_{}_{}, {});'.format(byte_idx, k.header.name, k.field_name, byte_width), 254)
	    generated_code += add_code("     /*fp3 = fopen(\"/home/zhaoxing/log/l2_src.txt\",\"a\");", 255)
            generated_code += add_code("       if(fp3){", 256)
	    generated_code += add_code('          fprintf(fp3,"key_{}:{{%d}}{{%d}}{{%d}}{{%d}}{{%d}}{{%d}}{{%d}}{{%d}}{{%d}}{{%d}}",key[0],key[1],key[2],key[3],key[4],key[5],key[6],key[7],key[8],key[9]);'.format(k.header.name), 257)
            generated_code += add_code("          fprintf(fp3,\"\\n\");", 258)
            generated_code += add_code("          fclose(fp3);", 259)
            generated_code += add_code("     }*/", 260)
            byte_idx += byte_width  ## compiler/backend/controlplane.c.py:262
    if table.match_type == "LPM": ## compiler/backend/controlplane.c.py:264
        generated_code += add_code(" uint8_t prefix_length = 0;", 264)
        for k in table.key.keyElements: ## compiler/backend/controlplane.c.py:266
            if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:267
                continue ## compiler/backend/controlplane.c.py:268
            # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:269
            if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:270
                continue ## compiler/backend/controlplane.c.py:271
            if k.match_type == "exact": ## compiler/backend/controlplane.c.py:273
                generated_code += add_code(' prefix_length += {};'.format(get_key_byte_width(k)), 273)
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:275
                generated_code += add_code(' prefix_length += field_instance_{}_{}_prefix_length;'.format(k.header.name, k.field_name), 275)
        generated_code += add_code(" int c, d;", 276)
        generated_code += add_code(' for(c = {}, d = 0; c >= 0; c--, d++) *(reverse_buffer+d) = *(key+c);'.format(byte_idx-1), 277)
        generated_code += add_code(' for(c = 0; c < {}; c++) *(key+c) = *(reverse_buffer+c);'.format(byte_idx), 278)
        generated_code += add_code(' lpm_add_promote(TABLE_{}, (uint8_t*)key, prefix_length, (uint8_t*)&action,true);'.format(table.name), 279)
    if table.match_type == "EXACT": ## compiler/backend/controlplane.c.py:282
        generated_code += add_code(' exact_add_promote(TABLE_{}, (uint8_t*)key, (uint8_t*)&action,true);'.format(table.name), 282)
    table_byte_idex = 0 ## compiler/backend/controlplane.c.py:285
    if table.match_type == "TERNARY": ## compiler/backend/controlplane.c.py:286
	generated_code += add_code('    uint8_t mask[{}];'.format(byte_idx), 286)
        for k in table.key.keyElements: ## compiler/backend/controlplane.c.py:288
            # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:289
            if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:290
                continue ## compiler/backend/controlplane.c.py:291
            if k.match_type == "exact": ## compiler/backend/controlplane.c.py:293
                generated_code += add_code(' for(int i=0;i<{};i++) mask[({}+i)] = 255;'.format(get_key_byte_width(k), table_byte_idex), 293)
                table_byte_idex += get_key_byte_width(k) ## compiler/backend/controlplane.c.py:295
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:296
                generated_code += add_code(' for(int i=0;i<{};i++){{'.format(get_key_byte_width(k)), 296)
                generated_code += add_code('      mask[{}+i] = 255;'.format(table_byte_idex), 297)
                generated_code += add_code('      if(field_instance_{}_{}_prefix_length/8 < (i+1)){{'.format(k.header.name, k.field_name), 298)
                generated_code += add_code('          int num = field_instance_{}_{}_prefix_length%8;'.format(k.header.name, k.field_name), 299)
                generated_code += add_code('          mask[{}+i] = mask[{}+i] << (8-num);'.format(table_byte_idex, table_byte_idex), 300)
                generated_code += add_code(" } ", 301)
                generated_code += add_code(" } ", 302)
                table_byte_idex += get_key_byte_width(k) ## compiler/backend/controlplane.c.py:304
            if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:305
                generated_code += add_code('    memcpy(mask+{},field_instance_{}_{}_mask,{});'.format(table_byte_idex, k.header.name, k.field_name, get_key_byte_width(k)), 305)
                table_byte_idex += get_key_byte_width(k) ## compiler/backend/controlplane.c.py:307
	generated_code += add_code('    ternary_add_promote(TABLE_{},(uint8_t*)key,(uint8_t*)mask,priority,(uint8_t*)&action,true);'.format(table.name), 307)
    generated_code += add_code(" }", 309)
generated_code += add_code("  void multicast_group_table_add( ", 310)
generated_code += add_code("  uint8_t field_instance_multicast_group_id[2], ", 311)
generated_code += add_code("      struct multicast_group_table_action action)", 312)
generated_code += add_code("  { ", 313)
generated_code += add_code("      uint8_t key[2]; ", 314)
generated_code += add_code("  memcpy(key+0, field_instance_multicast_group_id, 2); ", 315)
generated_code += add_code("      /*fp3 = fopen(\"/home/zhaoxing/log/l2_src.txt\",\"a\"); ", 316)
generated_code += add_code("        if(fp3){ ", 317)
generated_code += add_code("           fprintf(fp3,\"key_standard_metadata:{%d}{%d}{%d}{%d}{%d}{%d}{%d}{%d}{%d}{%d}\",key[0],key[1],key[2],key[3],key[4],key[5],key[6],key[7],key[8],key[9]); ", 318)
generated_code += add_code("           fprintf(fp3,\"\\n\"); ", 319)
generated_code += add_code("           fclose(fp3); ", 320)
generated_code += add_code("      }*/ ", 321)
generated_code += add_code("     exact_add_promote(TABLE_multicast_group_table,(uint8_t*)key,(uint8_t*)&action,true);", 322)
generated_code += add_code("  } ", 323)
generated_code += add_code("  void clone_session_table_add( ", 324)
generated_code += add_code("  uint8_t field_instance_clone_session_id[4], ", 325)
generated_code += add_code("      struct clone_session_table_action action)", 326)
generated_code += add_code("  { ", 327)
generated_code += add_code("      uint8_t key[4]; ", 328)
generated_code += add_code("  memcpy(key+0, field_instance_clone_session_id, 4); ", 329)
generated_code += add_code("      /*fp3 = fopen(\"/home/zhaoxing/log/l2_src.txt\",\"a\"); ", 330)
generated_code += add_code("        if(fp3){ ", 331)
generated_code += add_code("           fprintf(fp3,\"key_standard_metadata:{%d}{%d}{%d}{%d}{%d}{%d}{%d}{%d}{%d}{%d}\",key[0],key[1],key[2],key[3],key[4],key[5],key[6],key[7],key[8],key[9]); ", 332)
generated_code += add_code("           fprintf(fp3,\"\\n\"); ", 333)
generated_code += add_code("           fclose(fp3); ", 334)
generated_code += add_code("      }*/ ", 335)
generated_code += add_code("     exact_add_promote(TABLE_clone_session_table,(uint8_t*)key,(uint8_t*)&action,true);", 336)
generated_code += add_code("  } ", 337)

generated_code += add_code("")
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:340
    generated_code += add_code(' // note: {}, {}, {}'.format(table.name, table.match_type, table.key_length_bytes), 340)
    generated_code += add_code(' void {}_remove('.format(table.name), 341)
    i = 0 ## compiler/backend/controlplane.c.py:343
    for k in table.key.keyElements: ## compiler/backend/controlplane.c.py:344
        i = i + 1 ## compiler/backend/controlplane.c.py:345
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:346
            continue ## compiler/backend/controlplane.c.py:347
        # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:348
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:349
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:350
                continue ## compiler/backend/controlplane.c.py:351
        if i < len(table.key.keyElements): ## compiler/backend/controlplane.c.py:352
            if k.header_name=='meta': ## compiler/backend/controlplane.c.py:353
                byte_width = 'member_size(all_metadatas_t, field_metadata_%s)' % k.field_name ## compiler/backend/controlplane.c.py:354
                generated_code += add_code(' uint8_t field_instance_{}_{}[{}],'.format(k.header_name, k.field_name, byte_width), 354)
            else: ## compiler/backend/controlplane.c.py:356
                byte_width = get_key_byte_width(k) ## compiler/backend/controlplane.c.py:357
                generated_code += add_code(' uint8_t field_instance_{}_{}[{}],'.format(k.header.name, k.field_name, byte_width), 357)
            # TODO have keys' and tables' match_type the same case (currently: LPM vs lpm) ## compiler/backend/controlplane.c.py:360
            if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:361
                generated_code += add_code(' uint8_t field_instance_{}_{}_mask[{}],'.format(k.header.name, k.field_name, byte_width), 361)
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:363
                generated_code += add_code(' uint8_t field_instance_{}_{}_prefix_length,'.format(k.header.name, k.field_name), 363)
        else: ## compiler/backend/controlplane.c.py:365
            if k.header_name=='meta': ## compiler/backend/controlplane.c.py:366
                byte_width = 'member_size(all_metadatas_t, field_metadata_%s)' % k.field_name ## compiler/backend/controlplane.c.py:367
                generated_code += add_code(' uint8_t field_instance_{}_{}[{}]'.format(k.header_name, k.field_name, byte_width), 367)
            else: ## compiler/backend/controlplane.c.py:369
                byte_width = get_key_byte_width(k) ## compiler/backend/controlplane.c.py:370
                generated_code += add_code(' uint8_t field_instance_{}_{}[{}]'.format(k.header.name, k.field_name, byte_width), 370)
            # TODO have keys' and tables' match_type the same case (currently: LPM vs lpm) ## compiler/backend/controlplane.c.py:373
            if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:374
                generated_code += add_code(' ,uint8_t field_instance_{}_{}_mask[{}]'.format(k.header.name, k.field_name, byte_width), 374)
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:376
                generated_code += add_code(' ,uint8_t field_instance_{}_{}_prefix_length          '.format(k.header.name, k.field_name), 376)
    generated_code += add_code(")", 378)
    generated_code += add_code(" {", 379)
    if table.key_length_bytes==0:  # TODO: Check this part!!! ## compiler/backend/controlplane.c.py:382
        if len(table.key.keyElements) == 0: ## compiler/backend/controlplane.c.py:383
            generated_code += add_code("     uint8_t key[0];", 383)
        elif table.key.keyElements[0].header_name=='meta': ## compiler/backend/controlplane.c.py:385
            generated_code += add_code('     uint8_t key[member_size(all_metadatas_t, field_metadata_{})];'.format(table.key.keyElements[0].field_name), 385)
    else: ## compiler/backend/controlplane.c.py:387
         generated_code += add_code('     uint8_t key[{}];'.format(table.key_length_bytes), 387)
    byte_idx = 0 ## compiler/backend/controlplane.c.py:390
    for k in sorted((k for k in table.key.keyElements if k.get_attr('match_type') is not None), key = lambda k: match_type_order(k.match_type)): ## compiler/backend/controlplane.c.py:391
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:392
            continue ## compiler/backend/controlplane.c.py:393
        # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:394
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:395
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:396
                continue ## compiler/backend/controlplane.c.py:397
        if k.header_name=='meta': ## compiler/backend/controlplane.c.py:398
            byte_width = 'member_size(all_metadatas_t, field_metadata_%s)' % k.field_name ## compiler/backend/controlplane.c.py:399
            generated_code += add_code(' memcpy(key+{}, field_instance_{}_{}, {});'.format(byte_idx, k.header_name, k.field_name, byte_width), 399)
            byte_idx += get_key_byte_width(k) # Metafield size??? ## compiler/backend/controlplane.c.py:401
        else: ## compiler/backend/controlplane.c.py:402
            byte_width = get_key_byte_width(k) ## compiler/backend/controlplane.c.py:403
            generated_code += add_code(' memcpy(key+{}, field_instance_{}_{}, {});'.format(byte_idx, k.header.name, k.field_name, byte_width), 403)
            byte_idx += byte_width  ## compiler/backend/controlplane.c.py:405
    if table.match_type == "LPM": ## compiler/backend/controlplane.c.py:407
        generated_code += add_code(" uint8_t prefix_length = 0;", 407)
        for k in table.key.keyElements: ## compiler/backend/controlplane.c.py:409
            if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:410
                continue ## compiler/backend/controlplane.c.py:411
            # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:412
            if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:413
                continue ## compiler/backend/controlplane.c.py:414
            if k.match_type == "exact": ## compiler/backend/controlplane.c.py:416
                generated_code += add_code(' prefix_length += {};'.format(get_key_byte_width(k)), 416)
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:418
                generated_code += add_code(' prefix_length += field_instance_{}_{}_prefix_length;'.format(k.header.name, k.field_name), 418)
        generated_code += add_code(" int c, d;", 419)
        generated_code += add_code(' for(c = {}, d = 0; c >= 0; c--, d++) *(reverse_buffer+d) = *(key+c);'.format(byte_idx-1), 420)
        generated_code += add_code(' for(c = 0; c < {}; c++) *(key+c) = *(reverse_buffer+c);'.format(byte_idx), 421)
        generated_code += add_code(' lpm_delete_promote(TABLE_{}, (uint8_t*)key, prefix_length, true);'.format(table.name), 422)
    if table.match_type == "EXACT": ## compiler/backend/controlplane.c.py:425
        generated_code += add_code(' exact_delete_promote(TABLE_{}, (uint8_t*)key,true);'.format(table.name), 425)
    table_byte_idex = 0 ## compiler/backend/controlplane.c.py:427
    if table.match_type == "TERNARY": ## compiler/backend/controlplane.c.py:428
        generated_code += add_code(' ternary_delete_promote(TABLE_{}, (uint8_t*)key, true);'.format(table.name), 428)
    generated_code += add_code(" }", 430)
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:435
    generated_code += add_code(' // note: {}, {}, {}'.format(table.name, table.match_type, table.key_length_bytes), 435)
    generated_code += add_code(' void {}_get('.format(table.name), 436)
    for k in table.key.keyElements: ## compiler/backend/controlplane.c.py:438
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:439
            continue ## compiler/backend/controlplane.c.py:440
        # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:441
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:442
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:443
                continue ## compiler/backend/controlplane.c.py:444
        if k.header_name=='meta': ## compiler/backend/controlplane.c.py:446
            byte_width = 'member_size(all_metadatas_t, field_metadata_%s)' % k.field_name ## compiler/backend/controlplane.c.py:447
            generated_code += add_code(' uint8_t field_instance_{}_{}[{}], '.format(k.header_name, k.field_name, byte_width), 447)
        else: ## compiler/backend/controlplane.c.py:449
            byte_width = get_key_byte_width(k) ## compiler/backend/controlplane.c.py:450
            generated_code += add_code(' uint8_t field_instance_{}_{}[{}],'.format(k.header.name, k.field_name, byte_width), 450)
        # TODO have keys' and tables' match_type the same case (currently: LPM vs lpm) ## compiler/backend/controlplane.c.py:453
        if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:454
            generated_code += add_code(' uint8_t field_instance_{}_{}_mask[{}],'.format(k.header.name, k.field_name, byte_width), 454)
        if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:456
            generated_code += add_code(' uint8_t field_instance_{}_{}_prefix_length,'.format(k.header.name, k.field_name), 456)
    generated_code += add_code('     struct {}_action action)'.format(table.name), 458)
    generated_code += add_code(" {", 459)
    if table.key_length_bytes==0:  # TODO: Check this part!!! ## compiler/backend/controlplane.c.py:462
        if len(table.key.keyElements) == 0: ## compiler/backend/controlplane.c.py:463
            generated_code += add_code("     uint8_t key[0];", 463)
        elif table.key.keyElements[0].header_name=='meta': ## compiler/backend/controlplane.c.py:465
            generated_code += add_code('     uint8_t key[member_size(all_metadatas_t, field_metadata_{})];'.format(table.key.keyElements[0].field_name), 465)
    else: ## compiler/backend/controlplane.c.py:467
         generated_code += add_code('     uint8_t key[{}];'.format(table.key_length_bytes), 467)
    byte_idx = 0 ## compiler/backend/controlplane.c.py:470
    for k in sorted((k for k in table.key.keyElements if k.get_attr('match_type') is not None), key = lambda k: match_type_order(k.match_type)): ## compiler/backend/controlplane.c.py:471
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:472
            continue ## compiler/backend/controlplane.c.py:473
        # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:474
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:475
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:476
                continue ## compiler/backend/controlplane.c.py:477
        if k.header_name=='meta': ## compiler/backend/controlplane.c.py:478
            byte_width = 'member_size(all_metadatas_t, field_metadata_%s)' % k.field_name ## compiler/backend/controlplane.c.py:479
            generated_code += add_code(' memcpy(key+{}, field_instance_{}_{}, {});'.format(byte_idx, k.header_name, k.field_name, byte_width), 479)
            byte_idx += get_key_byte_width(k) # Metafield size??? ## compiler/backend/controlplane.c.py:481
        else: ## compiler/backend/controlplane.c.py:482
            byte_width = get_key_byte_width(k) ## compiler/backend/controlplane.c.py:483
            generated_code += add_code(' memcpy(key+{}, field_instance_{}_{}, {});'.format(byte_idx, k.header.name, k.field_name, byte_width), 483)
            byte_idx += byte_width  ## compiler/backend/controlplane.c.py:485
    if table.match_type == "LPM": ## compiler/backend/controlplane.c.py:487
        generated_code += add_code(" uint8_t prefix_length = 0;", 487)
        for k in table.key.keyElements: ## compiler/backend/controlplane.c.py:489
            # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:490
            if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:491
                continue ## compiler/backend/controlplane.c.py:492
            if k.match_type == "exact": ## compiler/backend/controlplane.c.py:494
                generated_code += add_code(' prefix_length += {};'.format(get_key_byte_width(k)), 494)
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:496
                generated_code += add_code(' prefix_length += field_instance_{}_{}_prefix_length;'.format(k.header.name, k.field_name), 496)
        generated_code += add_code(" int c, d;", 497)
        generated_code += add_code(' for(c = {}, d = 0; c >= 0; c--, d++) *(reverse_buffer+d) = *(key+c);'.format(byte_idx-1), 498)
        generated_code += add_code(' for(c = 0; c < {}; c++) *(key+c) = *(reverse_buffer+c);'.format(byte_idx), 499)
        generated_code += add_code(' lpm_lookup_promote(TABLE_{}, (uint8_t*)key, true);'.format(table.name), 500)
    if table.match_type == "EXACT": ## compiler/backend/controlplane.c.py:503
        generated_code += add_code(' exact_lookup_promote(TABLE_{}, (uint8_t*)key,true);'.format(table.name), 503)
    generated_code += add_code(" }", 505)
for table in hlir16.tables: ## compiler/backend/controlplane.c.py:510
    generated_code += add_code(' void {}_setdefault(struct {}_action action)'.format(table.name, table.name), 510)
    generated_code += add_code(" {", 511)
    generated_code += add_code('     debug("{}_setdefault\\n");'.format(table.name), 512)
    generated_code += add_code('     table_setdefault_promote(TABLE_{}, (uint8_t*)&action);'.format(table.name), 513)
    generated_code += add_code(" }", 514)
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:517
    generated_code += add_code(' void {}_add_table_entry(struct p4_ctrl_msg* ctrl_m) {{'.format(table.name), 517)
    for i, k in enumerate(table.key.keyElements): ## compiler/backend/controlplane.c.py:519
        # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:520
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:521
            continue ## compiler/backend/controlplane.c.py:522
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:523
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:524
                continue ## compiler/backend/controlplane.c.py:525
        if k.match_type == "exact": ## compiler/backend/controlplane.c.py:527
            if k.header_name=='meta': ## compiler/backend/controlplane.c.py:528
                generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_exact*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header_name, k.field_name, i), 528)
            else: ## compiler/backend/controlplane.c.py:530
                generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_exact*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header.name, k.field_name, i), 530)
        if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:532
            generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_lpm*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header.name, k.field_name, i), 532)
            generated_code += add_code(' uint16_t field_instance_{}_{}_prefix_length = ((struct p4_field_match_lpm*)ctrl_m->field_matches[{}])->prefix_length;'.format(k.header.name, k.field_name, i), 533)
        if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:535
            # TODO are these right? ## compiler/backend/controlplane.c.py:536
            generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_ternary*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header.name, k.field_name, i), 536)
            generated_code += add_code(' uint8_t* field_instance_{}_{}_mask = ((struct p4_field_match_ternary*)ctrl_m->field_matches[{}])->mask;'.format(k.header.name, k.field_name, i), 537)
    if table.match_type == "TERNARY": ## compiler/backend/controlplane.c.py:539
        generated_code += add_code(" uint16_t priority = ((struct p4_field_match_ternary*)ctrl_m->field_matches[0])->priority;", 539)
    for action in table.actions: ## compiler/backend/controlplane.c.py:541
        # TODO is there a more appropriate source for this than the annotation? ## compiler/backend/controlplane.c.py:542
        action_name_str = get_action_name_str(action) ## compiler/backend/controlplane.c.py:543
        ans = action_name_str.split('.') ## compiler/backend/controlplane.c.py:544
        action_name_str = ans[1]+ '.' + ans[2] ## compiler/backend/controlplane.c.py:545
        print("action_name_str: %s" % action_name_str) ## compiler/backend/controlplane.c.py:546
        generated_code += add_code(' if(strcmp("{}", ctrl_m->action_name)==0) {{'.format(action_name_str), 546)
        generated_code += add_code('     struct {}_action action;'.format(table.name), 547)
        generated_code += add_code('     action.action_id = action_{};'.format(action.action_object.name), 548)
        generated_code += add_code('     //debug("From controller: add new entry to " T4LIT({},table) " with action " T4LIT({},action) "\\n");'.format(table.name, action.action_object.name), 549)
        for j, p in enumerate(action.action_object.parameters.parameters): ## compiler/backend/controlplane.c.py:551
            generated_code += add_code(' uint8_t* {} = (uint8_t*)((struct p4_action_parameter*)ctrl_m->action_params[{}])->bitmap;'.format(p.name, j), 551)
            if p.type('type_ref').size <= 32: ## compiler/backend/controlplane.c.py:554
                size = 8 if p.type('type_ref').size <= 8 else 16 if p.type('type_ref').size <= 16 else 32 ## compiler/backend/controlplane.c.py:555
                generated_code += add_code(' //debug("   :: " T4LIT({},field) " (" T4LIT(%d) " bits): " T4LIT(%d,bytes) "\\n", {}, *(uint{}_t*){});'.format(p.name, p.type('type_ref').size, size, p.name), 555)
            else: ## compiler/backend/controlplane.c.py:557
                generated_code += add_code(' //dbg_bytes({}, ({}+7)/8, "   :: " T4LIT({},field) " (" T4LIT(%d) " bits): ", {});'.format(p.name, p.type('type_ref').size, p.name, p.type('type_ref').size), 557)
            generated_code += add_code(' memcpy(action.{}_params.{}, {}, {});'.format(action.action_object.name, p.name, p.name, (p.type._type_ref.size+7)/8), 559)
        generated_code += add_code('     {}_add('.format(table.name), 560)
        for i, k in enumerate(table.key.keyElements): ## compiler/backend/controlplane.c.py:562
            # TODO handle specials properly (isValid etc.) ## compiler/backend/controlplane.c.py:563
            if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:564
                continue ## compiler/backend/controlplane.c.py:565
            if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:566
                if k.header_name!='meta': ## compiler/backend/controlplane.c.py:567
                    continue ## compiler/backend/controlplane.c.py:568
            if k.header_name == 'meta': ## compiler/backend/controlplane.c.py:569
                generated_code += add_code(' field_instance_{}_{},'.format(k.header_name, k.field_name), 569)
            else: ## compiler/backend/controlplane.c.py:571
                generated_code += add_code(' field_instance_{}_{},'.format(k.header.name, k.field_name), 571)
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:573
                generated_code += add_code(' field_instance_{}_{}_prefix_length,'.format(k.header.name, k.field_name), 573)
            if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:575
                generated_code += add_code(' field_instance_{}_{}_mask /* TODO dstPort_mask */,'.format(k.header.name, k.field_name), 575)
        if table.match_type == "TERNARY": ## compiler/backend/controlplane.c.py:577
            generated_code += add_code(" priority,", 577)
        generated_code += add_code("     action);", 578)
        generated_code += add_code("", 579)
        generated_code += add_code(" } //else", 580)
    valid_actions = ", ".join(["\" T4LIT(" + get_action_name_str(a) + ",action) \"" for a in table.actions]) ## compiler/backend/controlplane.c.py:583
    generated_code += add_code(' //debug(" " T4LIT(!!!! Table add entry,warning) " on table " T4LIT({},table) ": action name " T4LIT(mismatch,warning) ": " T4LIT(%s,action) ", expected one of ({}).\\n", ctrl_m->action_name);'.format(table.name, valid_actions), 583)
    generated_code += add_code(" }", 584)
generated_code += add_code(" void multicast_group_table_add_table_entry(struct p4_ctrl_msg* ctrl_m) { ", 585)
generated_code += add_code("  uint8_t* field_instance_multicast_group_id = (uint8_t*)(((struct p4_field_match_exact*)ctrl_m->field_matches[0])->bitmap); ", 586)
generated_code += add_code("  //debug(\"---------multicast_group_id:%d,%d,%d,%d,%d,%d\\n\",*field_instance_multicast_group_id,*(field_instance_multicast_group_id+1),*(field_instance_multicast_group_id+2),*(field_instance_multicast_group_id+3),*(field_instance_multicast_group_id+4),*(field_instance_multicast_group_id+5));", 587)
generated_code += add_code("  if(strcmp(\"set_bitmcast\", ctrl_m->action_name)==0) { ", 588)
generated_code += add_code("      struct multicast_group_table_action action; ", 589)
generated_code += add_code("      action.action_id = action_set_bitmcast; ", 590)
generated_code += add_code("      uint8_t* bit_mcast = (uint8_t*)((struct p4_action_parameter*)ctrl_m->action_params[0])->bitmap;", 591)
generated_code += add_code("       //debug(\"   :: \" T4LIT(port_num_4,field) \" (\" T4LIT(%d) \" bits): \" T4LIT(%d,bytes) \"\\n\", 9, *(uint16_t*)port_num_4);", 592)
generated_code += add_code("       memcpy(action.set_bitmcast_params.bit_mcast, bit_mcast, 4);", 593)
generated_code += add_code("      //debug(\"--------------------1111\\n\");", 594)
generated_code += add_code("      //debug(\"From controller: add new entry to \" T4LIT(acl_table_0,table) \" with action \" T4LIT(send_to_cpu,action) \"\\n\");", 595)
generated_code += add_code("      multicast_group_table_add( ", 596)
generated_code += add_code("  field_instance_multicast_group_id,", 597)
generated_code += add_code("      action); ", 598)
generated_code += add_code("  } //else ", 599)
generated_code += add_code("  //debug(\" \" T4LIT(!!!! Table add entry,warning) \" on table \" T4LIT(acl_table_0,table) \": action name \" T4LIT(mismatch,warning) \": \" T4LIT(%s,action) \", expected one of (\" T4LIT(IngressPipeImpl.send_to_cpu,action) \", \" T4LIT(IngressPipeImpl.drop,action) \", \" T4LIT(NoAction,action) \").\\n\", ctrl_m->action_name);", 600)
generated_code += add_code("  } ", 601)
generated_code += add_code(" void clone_session_table_add_table_entry(struct p4_ctrl_msg* ctrl_m) { ", 602)
generated_code += add_code("  uint8_t* field_instance_clone_session_id = (uint8_t*)(((struct p4_field_match_exact*)ctrl_m->field_matches[0])->bitmap); ", 603)
generated_code += add_code("  //debug(\"---------clone_session_id:%d,%d,%d,%d,%d,%d\\n\",*field_instance_clone_session_id,*(field_instance_clone_session_id+1),*(field_instance_clone_session_id+2),*(field_instance_clone_session_id+3),*(field_instance_clone_session_id+4),*(field_instance_clone_session_id+5));", 604)
generated_code += add_code("  if(strcmp(\"set_clone_egress_port\", ctrl_m->action_name)==0) { ", 605)
generated_code += add_code("      struct clone_session_table_action action; ", 606)
generated_code += add_code("      action.action_id = action_set_clone_egress_port; ", 607)
generated_code += add_code("      uint8_t* egress_port = (uint8_t*)((struct p4_action_parameter*)ctrl_m->action_params[0])->bitmap;", 608)
generated_code += add_code("       //debug(\"   :: \" T4LIT(port_num_4,field) \" (\" T4LIT(%d) \" bits): \" T4LIT(%d,bytes) \"\\n\", 9, *(uint16_t*)port_num_4);", 609)
generated_code += add_code("       memcpy(action.set_clone_egress_port_params.egress_port, egress_port, 2);", 610)
generated_code += add_code("      //debug(\"--------------------1111\\n\");", 611)
generated_code += add_code("      //debug(\"From controller: add new entry to \" T4LIT(acl_table_0,table) \" with action \" T4LIT(send_to_cpu,action) \"\\n\");", 612)
generated_code += add_code("      clone_session_table_add( ", 613)
generated_code += add_code("  field_instance_clone_session_id,", 614)
generated_code += add_code("      action); ", 615)
generated_code += add_code("  } //else ", 616)
generated_code += add_code("  if(strcmp(\"set_clone_multicast_group_id\", ctrl_m->action_name)==0) { ", 617)
generated_code += add_code("      struct clone_session_table_action action; ", 618)
generated_code += add_code("      action.action_id = action_set_clone_multicast_group_id; ", 619)
generated_code += add_code("      uint8_t* multicast_group_id = (uint8_t*)((struct p4_action_parameter*)ctrl_m->action_params[0])->bitmap;", 620)
generated_code += add_code("       //debug(\"   :: \" T4LIT(port_num_4,field) \" (\" T4LIT(%d) \" bits): \" T4LIT(%d,bytes) \"\\n\", 9, *(uint16_t*)port_num_4);", 621)
generated_code += add_code("       memcpy(action.set_clone_multicast_group_id_params.multicast_group_id, multicast_group_id, 2);", 622)
generated_code += add_code("      debug(\"--------------------1111\\n\");", 623)
generated_code += add_code("      //debug(\"From controller: add new entry to \" T4LIT(acl_table_0,table) \" with action \" T4LIT(send_to_cpu,action) \"\\n\");", 624)
generated_code += add_code("      clone_session_table_add( ", 625)
generated_code += add_code("  field_instance_clone_session_id,", 626)
generated_code += add_code("      action); ", 627)
generated_code += add_code("  } //else ", 628)
generated_code += add_code("  //debug(\" \" T4LIT(!!!! Table add entry,warning) \" on table \" T4LIT(acl_table_0,table) \": action name \" T4LIT(mismatch,warning) \": \" T4LIT(%s,action) \", expected one of (\" T4LIT(IngressPipeImpl.send_to_cpu,action) \", \" T4LIT(IngressPipeImpl.drop,action) \", \" T4LIT(NoAction,action) \").\\n\", ctrl_m->action_name);", 629)
generated_code += add_code("  } ", 630)

generated_code += add_code("")
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:633
    generated_code += add_code(' void {}_remove_table_entry(struct p4_ctrl_msg* ctrl_m) {{'.format(table.name), 633)
    for i, k in enumerate(table.key.keyElements): ## compiler/backend/controlplane.c.py:635
        # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:636
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:637
            continue ## compiler/backend/controlplane.c.py:638
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:639
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:640
                continue ## compiler/backend/controlplane.c.py:641
        if k.match_type == "exact": ## compiler/backend/controlplane.c.py:643
            if k.header_name=='meta': ## compiler/backend/controlplane.c.py:644
                generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_exact*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header_name, k.field_name, i), 644)
            else: ## compiler/backend/controlplane.c.py:646
                generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_exact*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header.name, k.field_name, i), 646)
        if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:648
            generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_lpm*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header.name, k.field_name, i), 648)
            generated_code += add_code(' uint16_t field_instance_{}_{}_prefix_length = ((struct p4_field_match_lpm*)ctrl_m->field_matches[{}])->prefix_length;'.format(k.header.name, k.field_name, i), 649)
        if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:651
            # TODO are these right? ## compiler/backend/controlplane.c.py:652
            generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_ternary*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header.name, k.field_name, i), 652)
            generated_code += add_code(' uint16_t field_instance_{}_{}_mask = ((struct p4_field_match_ternary*)ctrl_m->field_matches[{}])->mask;'.format(k.header.name, k.field_name, i), 653)
    j = 0 ## compiler/backend/controlplane.c.py:656
    generated_code += add_code('     {}_remove('.format(table.name), 656)
    for i, k in enumerate(table.key.keyElements): ## compiler/backend/controlplane.c.py:658
        j = j + 1 ## compiler/backend/controlplane.c.py:659
        # TODO handle specials properly (isValid etc.) ## compiler/backend/controlplane.c.py:660
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:661
            continue ## compiler/backend/controlplane.c.py:662
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:663
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:664
                continue ## compiler/backend/controlplane.c.py:665
        if j < len(table.key.keyElements): ## compiler/backend/controlplane.c.py:666
            if k.header_name == 'meta': ## compiler/backend/controlplane.c.py:667
                generated_code += add_code(' field_instance_{}_{},'.format(k.header_name, k.field_name), 667)
            else: ## compiler/backend/controlplane.c.py:669
                generated_code += add_code(' field_instance_{}_{},'.format(k.header.name, k.field_name), 669)
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:671
                generated_code += add_code(' field_instance_{}_{}_prefix_length,'.format(k.header.name, k.field_name), 671)
            if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:673
                generated_code += add_code(' field_instance_{}_{}_mask /* TODO dstPort_mask */,'.format(k.header.name, k.field_name), 673)
        else: ## compiler/backend/controlplane.c.py:675
            if k.header_name == 'meta': ## compiler/backend/controlplane.c.py:676
                generated_code += add_code(' field_instance_{}_{}'.format(k.header_name, k.field_name), 676)
            else: ## compiler/backend/controlplane.c.py:678
                generated_code += add_code(' field_instance_{}_{}'.format(k.header.name, k.field_name), 678)
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:680
                generated_code += add_code(' ,field_instance_{}_{}_prefix_length'.format(k.header.name, k.field_name), 680)
            if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:682
                generated_code += add_code(' ,field_instance_{}_{}_mask /* TODO dstPort_mask */             '.format(k.header.name, k.field_name), 682)
    generated_code += add_code("     );", 683)
    generated_code += add_code("", 684)
    valid_actions = ", ".join(["\" T4LIT(" + get_action_name_str(a) + ",action) \"" for a in table.actions]) ## compiler/backend/controlplane.c.py:688
    generated_code += add_code(' //debug(" " T4LIT(!!!! Table add entry,warning) " on table " T4LIT({},table) ": action name " T4LIT(mismatch,warning) ": " T4LIT(%s,action) ", expected one of ({}).\\n", ctrl_m->action_name);'.format(table.name, valid_actions), 688)
    generated_code += add_code(" }", 689)
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:694
    generated_code += add_code(' void {}_get_table_entries(struct p4_ctrl_msg* ctrl_m) {{'.format(table.name), 694)
    for i, k in enumerate(table.key.keyElements): ## compiler/backend/controlplane.c.py:696
        # TODO should properly handle specials (isValid etc.) ## compiler/backend/controlplane.c.py:697
        if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:698
            continue ## compiler/backend/controlplane.c.py:699
        if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:700
            if k.header_name!='meta': ## compiler/backend/controlplane.c.py:701
                continue ## compiler/backend/controlplane.c.py:702
        if k.match_type == "exact": ## compiler/backend/controlplane.c.py:704
            if k.header_name=='meta': ## compiler/backend/controlplane.c.py:705
                generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_exact*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header_name, k.field_name, i), 705)
            else: ## compiler/backend/controlplane.c.py:707
                generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_exact*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header.name, k.field_name, i), 707)
        if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:709
            generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_lpm*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header.name, k.field_name, i), 709)
            generated_code += add_code(' uint16_t field_instance_{}_{}_prefix_length = ((struct p4_field_match_lpm*)ctrl_m->field_matches[{}])->prefix_length;'.format(k.header.name, k.field_name, i), 710)
        if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:712
            # TODO are these right? ## compiler/backend/controlplane.c.py:713
            generated_code += add_code(' uint8_t* field_instance_{}_{} = (uint8_t*)(((struct p4_field_match_ternary*)ctrl_m->field_matches[{}])->bitmap);'.format(k.header.name, k.field_name, i), 713)
            generated_code += add_code(' uint16_t field_instance_{}_{}_mask = ((struct p4_field_match_ternary*)ctrl_m->field_matches[{}])->mask;'.format(k.header.name, k.field_name, i), 714)
    for action in table.actions: ## compiler/backend/controlplane.c.py:717
        # TODO is there a more appropriate source for this than the annotation? ## compiler/backend/controlplane.c.py:718
        action_name_str = get_action_name_str(action) ## compiler/backend/controlplane.c.py:719
        generated_code += add_code(' if(strcmp("{}", ctrl_m->action_name)==0) {{'.format(action_name_str), 719)
        generated_code += add_code('     struct {}_action action;'.format(table.name), 720)
        generated_code += add_code('     action.action_id = action_{};'.format(action.action_object.name), 721)
        for j, p in enumerate(action.action_object.parameters.parameters): ## compiler/backend/controlplane.c.py:723
            generated_code += add_code(' uint8_t* {} = (uint8_t*)((struct p4_action_parameter*)ctrl_m->action_params[{}])->bitmap;'.format(p.name, j), 723)
            if p.type('type_ref').size <= 32: ## compiler/backend/controlplane.c.py:726
                size = 8 if p.type('type_ref').size <= 8 else 16 if p.type('type_ref').size <= 16 else 32 ## compiler/backend/controlplane.c.py:727
                generated_code += add_code(' //debug("   :: " T4LIT({},field) " (" T4LIT(%d) " bits): " T4LIT(%d,bytes) "\\n", {}, *(uint{}_t*){});'.format(p.name, p.type('type_ref').size, size, p.name), 727)
            else: ## compiler/backend/controlplane.c.py:729
                generated_code += add_code(' //dbg_bytes({}, ({}+7)/8, "   :: " T4LIT({},field) " (" T4LIT(%d) " bits): ", {});'.format(p.name, p.type('type_ref').size, p.name, p.type('type_ref').size), 729)
            generated_code += add_code(' memcpy(action.{}_params.{}, {}, {});'.format(action.action_object.name, p.name, p.name, (p.type._type_ref.size+7)/8), 731)
        generated_code += add_code('     {}_get('.format(table.name), 733)
        for i, k in enumerate(table.key.keyElements): ## compiler/backend/controlplane.c.py:735
            # TODO handle specials properly (isValid etc.) ## compiler/backend/controlplane.c.py:736
            if not hasattr(k,"header_name"): ## compiler/backend/controlplane.c.py:737
                continue ## compiler/backend/controlplane.c.py:738
            if k.get_attr('header') is None: ## compiler/backend/controlplane.c.py:739
                if k.header_name!='meta': ## compiler/backend/controlplane.c.py:740
                    continue ## compiler/backend/controlplane.c.py:741
            if k.header_name == 'meta': ## compiler/backend/controlplane.c.py:742
                generated_code += add_code(' field_instance_{}_{},'.format(k.header_name, k.field_name), 742)
            else: ## compiler/backend/controlplane.c.py:744
                generated_code += add_code(' field_instance_{}_{},'.format(k.header.name, k.field_name), 744)
            if k.match_type == "lpm": ## compiler/backend/controlplane.c.py:746
                generated_code += add_code(' field_instance_{}_{}_prefix_length,'.format(k.header.name, k.field_name), 746)
            if k.match_type == "ternary": ## compiler/backend/controlplane.c.py:748
                generated_code += add_code(' field_instance_{}_{}_mask /* TODO dstPort_mask */,'.format(k.header.name, k.field_name), 748)
        generated_code += add_code("     action);", 749)
        generated_code += add_code("", 750)
        generated_code += add_code(" } //else", 751)
    valid_actions = ", ".join(["\" T4LIT(" + get_action_name_str(a) + ",action) \"" for a in table.actions]) ## compiler/backend/controlplane.c.py:754
    generated_code += add_code(' //debug(" " T4LIT(!!!! Table add entry,warning) " on table " T4LIT({},table) ": action name " T4LIT(mismatch,warning) ": " T4LIT(%s,action) ", expected one of ({}).\\n", ctrl_m->action_name);'.format(table.name, valid_actions), 754)
    generated_code += add_code(" }", 755)
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:760
    generated_code += add_code(' void {}_set_default_table_action(struct p4_ctrl_msg* ctrl_m) {{'.format(table.name), 760)
    for action in table.actions: ## compiler/backend/controlplane.c.py:762
        action_name_str = get_action_name_str(action) ## compiler/backend/controlplane.c.py:763
        generated_code += add_code(' if(strcmp("{}", ctrl_m->action_name)==0) {{'.format(action_name_str), 763)
        generated_code += add_code('     debug("{}_set_default_table_action, {}\\n");'.format(table.name, action_name_str), 764)
        generated_code += add_code('     struct {}_action action;'.format(table.name), 765)
        generated_code += add_code('     action.action_id = action_{};'.format(action.action_object.name), 766)
        for j, p in enumerate(action.action_object.parameters.parameters): ## compiler/backend/controlplane.c.py:768
            generated_code += add_code(' uint8_t* {} = (uint8_t*)((struct p4_action_parameter*)ctrl_m->action_params[{}])->bitmap;'.format(p.name, j), 768)
            generated_code += add_code(' memcpy(action.{}_params.{}, {}, {});'.format(action.action_object.name, p.name, p.name, (p.type._type_ref.size+7)/8), 769)
        generated_code += add_code('     //debug("From controller: set default action for " T4LIT({},table) " with action " T4LIT({},action) "\\n");'.format(table.name, action_name_str), 770)
        generated_code += add_code('     {}_setdefault( action );'.format(table.name), 771)
        generated_code += add_code(" } //else", 772)
    valid_actions = ", ".join(["\" T4LIT(" + get_action_name_str(a) + ",action) \"" for a in table.actions]) ## compiler/backend/controlplane.c.py:775
    generated_code += add_code(' //debug(" " T4LIT(!!!! Table setdefault,warning) " on table " T4LIT({},table) ": action name " T4LIT(mismatch,warning) " (" T4LIT(%s,action) "), expected one of ({}).\\n", ctrl_m->action_name);'.format(table.name, valid_actions), 775)
    generated_code += add_code(" }", 776)
generated_code += add_code(" void ctrl_add_table_entry(struct p4_ctrl_msg* ctrl_m) {", 779)
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:781
    table_name_str = get_table_name_str(table) ## compiler/backend/controlplane.c.py:782
    generated_code += add_code(' if (strcmp("{}", ctrl_m->table_name) == 0) {{'.format(table_name_str), 782)
    generated_code += add_code('     {}_add_table_entry(ctrl_m);'.format(table.name), 783)
    generated_code += add_code("     return;", 784)
    generated_code += add_code(" }", 785)
generated_code += add_code(" if (strcmp(\"multicast_group_table\", ctrl_m->table_name) == 0) { ", 786)
generated_code += add_code("     multicast_group_table_add_table_entry(ctrl_m); ", 787)
generated_code += add_code("      return; ", 788)
generated_code += add_code("  }", 789)
generated_code += add_code(" if (strcmp(\"clone_session_table\", ctrl_m->table_name) == 0) { ", 790)
generated_code += add_code("     clone_session_table_add_table_entry(ctrl_m); ", 791)
generated_code += add_code("      return; ", 792)
generated_code += add_code("  }", 793)
generated_code += add_code('     //debug(" " T4LIT(!!!! Table add entry,warning) ": table name " T4LIT(mismatch,warning) " (" T4LIT(%s,table) "), expected one of ({}).\\n", ctrl_m->table_name);'.format(keyed_table_names), 794)
generated_code += add_code(" }", 795)

generated_code += add_code("")
#########################################################  REMOVE  ##################################################################### ## compiler/backend/controlplane.c.py:799
generated_code += add_code(" void ctrl_remove_table_entry(struct p4_ctrl_msg* ctrl_m) {", 799)
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:801
    table_name_str = get_table_name_str(table) ## compiler/backend/controlplane.c.py:802
    generated_code += add_code(' if (strcmp("{}", ctrl_m->table_name) == 0) {{'.format(table_name_str), 802)
    generated_code += add_code('     {}_remove_table_entry(ctrl_m);'.format(table.name), 803)
    generated_code += add_code("     return;", 804)
    generated_code += add_code(" }", 805)
generated_code += add_code(" }", 806)

generated_code += add_code("")
generated_code += add_code(" void ctrl_get_table_entries(struct p4_ctrl_msg* ctrl_m) {", 809)
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:811
    table_name_str = get_table_name_str(table) ## compiler/backend/controlplane.c.py:812
    generated_code += add_code(' if (strcmp("{}", ctrl_m->table_name) == 0) {{'.format(table_name_str), 812)
    generated_code += add_code('     {}_get_table_entries(ctrl_m);'.format(table.name), 813)
    generated_code += add_code("     return;", 814)
    generated_code += add_code(" }", 815)
generated_code += add_code(" }", 816)

generated_code += add_code("")
generated_code += add_code(" extern char* action_names[];", 819)

generated_code += add_code("")
generated_code += add_code(" void ctrl_setdefault(struct p4_ctrl_msg* ctrl_m) {", 821)
generated_code += add_code(' //debug("Set default message from control plane for table " T4LIT(%s,table) ": " T4LIT(%s,action) "\\n", ctrl_m->table_name, ctrl_m->action_name);', 822)
for table in hlir16_tables_with_keys: ## compiler/backend/controlplane.c.py:824
    table_name_str = get_table_name_str(table) ## compiler/backend/controlplane.c.py:825
    generated_code += add_code(' if (strcmp("{}", ctrl_m->table_name) == 0) {{'.format(table_name_str), 825)
    generated_code += add_code('     {}_set_default_table_action(ctrl_m);'.format(table.name), 826)
    generated_code += add_code("     return;", 827)
    generated_code += add_code(" }", 828)
generated_code += add_code('     //debug(" " T4LIT(!!!! Table setdefault,warning) ": table name " T4LIT(mismatch,warning) " (" T4LIT(%s,table) "), expected one of ({}).\\n", ctrl_m->table_name);'.format(keyed_table_names), 830)
generated_code += add_code(" }", 831)

generated_code += add_code("")
hack_i={} ## compiler/backend/controlplane.c.py:834
for smem in hlir16.registers: ## compiler/backend/controlplane.c.py:835
        for c in smem.components: ## compiler/backend/controlplane.c.py:836
            cname = c['name'] ## compiler/backend/controlplane.c.py:837
            if cname in hack_i: ## compiler/backend/controlplane.c.py:838
		continue ## compiler/backend/controlplane.c.py:839
            hack_i[cname] = 1 ## compiler/backend/controlplane.c.py:840
            if smem.smem_type not in ["direct_counter", "direct_meter"]: ## compiler/backend/controlplane.c.py:841
                    generated_code += add_code('uint{}_t ctrl_{}[{}];'.format(smem.bit_width, cname, smem.bit_width), 841)
generated_code += add_code(" uint32_t* read_register_by_name(char* register_name, int* size){", 843)
generated_code += add_code("   int i;", 844)
hack_i = {} ## compiler/backend/controlplane.c.py:846
for smem in hlir16.registers: ## compiler/backend/controlplane.c.py:847
        for c in smem.components: ## compiler/backend/controlplane.c.py:848
            cname = c['name'] ## compiler/backend/controlplane.c.py:849
            if cname in hack_i: ## compiler/backend/controlplane.c.py:850
                continue ## compiler/backend/controlplane.c.py:851
            hack_i[cname] = 1 ## compiler/backend/controlplane.c.py:852
            if smem.smem_type not in ["direct_counter", "direct_meter"]: ## compiler/backend/controlplane.c.py:853
                generated_code += add_code(' if(strcmp("{}", register_name) == 0){{'.format(cname), 853)
                generated_code += add_code('    *size = {};'.format(smem.amount), 854)
                generated_code += add_code('    for (i=0; i<{}; i++) extern_register_read_uint{}_t(global_smem.{}, &ctrl_{}[i], i);'.format(smem.amount, smem.bit_width, cname, cname), 855)
                generated_code += add_code('    return  ctrl_{};'.format(cname), 856)
                generated_code += add_code(" }", 857)
generated_code += add_code("   *size = -1;", 858)
generated_code += add_code("   return size;", 859)
generated_code += add_code(" }", 860)

generated_code += add_code("")
generated_code += add_code(" uint32_t* write_register_by_name(char* register_name, int* size, int index, int data){", 862)
generated_code += add_code("   int i;", 863)
generated_code += add_code("   //printf(\"++++++++++++++++++++++++index = %d++++++++++++++++++++++++++\\n\", index);", 864)
generated_code += add_code("   //printf(\"++++++++++++++++++++++++data = %d++++++++++++++++++++++++++\\n\", data);", 865)
hack_i = {} ## compiler/backend/controlplane.c.py:867
for smem in hlir16.registers: ## compiler/backend/controlplane.c.py:868
        for c in smem.components: ## compiler/backend/controlplane.c.py:869
            cname = c['name'] ## compiler/backend/controlplane.c.py:870
            if cname in hack_i: ## compiler/backend/controlplane.c.py:871
                continue ## compiler/backend/controlplane.c.py:872
            hack_i[cname] = 1 ## compiler/backend/controlplane.c.py:873
            if smem.smem_type not in ["direct_counter", "direct_meter"]: ## compiler/backend/controlplane.c.py:874
                generated_code += add_code(' if(strcmp("{}", register_name) == 0){{'.format(cname), 874)
                generated_code += add_code('    *size = {};'.format(smem.amount), 875)
                generated_code += add_code('    extern_register_write_uint{}_t(global_smem.{}, index, data);'.format(smem.bit_width, cname), 876)
                generated_code += add_code("    return size;", 877)
                generated_code += add_code(" }", 878)
generated_code += add_code("   *size = -1;", 879)
generated_code += add_code("   return size;", 880)
generated_code += add_code(" }", 881)

generated_code += add_code("")
generated_code += add_code(" extern volatile int ctrl_is_initialized;", 883)
generated_code += add_code(" void ctrl_initialized() {", 884)
generated_code += add_code("     //debug(\"Control plane fully initialized.\\n\");", 885)
generated_code += add_code("     ctrl_is_initialized = 1;", 886)
generated_code += add_code(" }", 887)

generated_code += add_code("")
generated_code += add_code(" void ctrl_packet_out(struct p4_ctrl_msg* ctrl_m) {", 890)
generated_code += add_code("     //debug(\"Control plane send packetout\\n\");", 891)
generated_code += add_code("     send_packetout_from_controller(ctrl_m);", 892)
generated_code += add_code(" }", 893)

generated_code += add_code("")
generated_code += add_code(" void recv_from_controller(struct p4_ctrl_msg* ctrl_m) {", 895)
generated_code += add_code("     if (ctrl_m->type == P4T_ADD_TABLE_ENTRY) {", 896)
generated_code += add_code("          ctrl_add_table_entry(ctrl_m);", 897)
generated_code += add_code("     } else if (ctrl_m->type == P4T_SET_DEFAULT_ACTION) {", 898)
generated_code += add_code("         ctrl_setdefault(ctrl_m);", 899)
generated_code += add_code("     } else if (ctrl_m->type == P4T_CTRL_INITIALIZED) {", 900)
generated_code += add_code("         ctrl_initialized();", 901)
generated_code += add_code("     } else if (ctrl_m->type == P4T_REMOVE_TABLE_ENTRY) {", 902)
generated_code += add_code("          ctrl_remove_table_entry(ctrl_m);", 903)
generated_code += add_code("     } else if (ctrl_m->type == P4T_GET_TABLE_ENTRIES) {", 904)
generated_code += add_code("          ctrl_get_table_entries(ctrl_m);", 905)
generated_code += add_code("     } else if (ctrl_m->type == P4T_PACKET_OUT) {", 906)
generated_code += add_code("         ctrl_packet_out(ctrl_m);", 907)
generated_code += add_code("     }", 908)
generated_code += add_code(" }", 909)

generated_code += add_code("")
generated_code += add_code(" ctrl_plane_backend bg;", 911)
generated_code += add_code(" void init_control_plane()", 912)
generated_code += add_code(" {", 913)
generated_code += add_code(" #ifndef T4P4S_NO_CONTROL_PLANE", 914)
generated_code += add_code("     bg = create_backend(3, 1000, \"localhost\", 11111, recv_from_controller);", 915)
generated_code += add_code("     launch_backend(bg);", 916)
generated_code += add_code("     dev_mgr_init_with_t4p4s(dev_mgr_ptr, recv_from_controller, read_register_by_name, write_register_by_name, ctrl_all_counter_handle, 1);", 917)
generated_code += add_code("     PIGrpcServerRunAddrGnmi(\"0.0.0.0:50051\", 0);", 918)
generated_code += add_code("     //PIGrpcServerRunAddrin(\"192.168.133.189:50052\");", 919)
generated_code += add_code("     //PIGrpcServerRunAddrout(\"192.168.133.189:50053\");", 920)
generated_code += add_code("     //bg = create_backend(3, 1000, \"localhost\", 11111, recv_from_controller);", 921)
generated_code += add_code("     //launch_backend(bg);", 922)
generated_code += add_code("     //dev_mgr_init_with_t4p4s(dev_mgr_ptr, recv_from_controller, 1);", 923)

generated_code += add_code("")
generated_code += add_code(" #endif", 926)
generated_code += add_code(" }", 927)

generated_code += add_code("")
generated_code += add_code(" void async_packetin(uint8_t* data, int len)", 929)
generated_code += add_code(" {   ", 930)
generated_code += add_code("    //for (int i = 0; i < len; i++)", 931)
generated_code += add_code("    //{", 932)
generated_code += add_code("        //printf(\"%02x\",*data);", 933)
generated_code += add_code("       // data++;", 934)
generated_code += add_code("    //}", 935)
generated_code += add_code("     //debug(\"async_packetin_data---------%02x\",*data);", 936)
generated_code += add_code("     async_packetin_data(data,len);", 937)
generated_code += add_code(" }", 938)
