// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: p4/v1/p4data.proto

#ifndef PROTOBUF_INCLUDED_p4_2fv1_2fp4data_2eproto
#define PROTOBUF_INCLUDED_p4_2fv1_2fp4data_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_p4_2fv1_2fp4data_2eproto 

namespace protobuf_p4_2fv1_2fp4data_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_p4_2fv1_2fp4data_2eproto
namespace p4 {
namespace v1 {
class P4Data;
class P4DataDefaultTypeInternal;
extern P4DataDefaultTypeInternal _P4Data_default_instance_;
class P4Header;
class P4HeaderDefaultTypeInternal;
extern P4HeaderDefaultTypeInternal _P4Header_default_instance_;
class P4HeaderStack;
class P4HeaderStackDefaultTypeInternal;
extern P4HeaderStackDefaultTypeInternal _P4HeaderStack_default_instance_;
class P4HeaderUnion;
class P4HeaderUnionDefaultTypeInternal;
extern P4HeaderUnionDefaultTypeInternal _P4HeaderUnion_default_instance_;
class P4HeaderUnionStack;
class P4HeaderUnionStackDefaultTypeInternal;
extern P4HeaderUnionStackDefaultTypeInternal _P4HeaderUnionStack_default_instance_;
class P4StructLike;
class P4StructLikeDefaultTypeInternal;
extern P4StructLikeDefaultTypeInternal _P4StructLike_default_instance_;
class P4Varbit;
class P4VarbitDefaultTypeInternal;
extern P4VarbitDefaultTypeInternal _P4Varbit_default_instance_;
}  // namespace v1
}  // namespace p4
namespace google {
namespace protobuf {
template<> ::p4::v1::P4Data* Arena::CreateMaybeMessage<::p4::v1::P4Data>(Arena*);
template<> ::p4::v1::P4Header* Arena::CreateMaybeMessage<::p4::v1::P4Header>(Arena*);
template<> ::p4::v1::P4HeaderStack* Arena::CreateMaybeMessage<::p4::v1::P4HeaderStack>(Arena*);
template<> ::p4::v1::P4HeaderUnion* Arena::CreateMaybeMessage<::p4::v1::P4HeaderUnion>(Arena*);
template<> ::p4::v1::P4HeaderUnionStack* Arena::CreateMaybeMessage<::p4::v1::P4HeaderUnionStack>(Arena*);
template<> ::p4::v1::P4StructLike* Arena::CreateMaybeMessage<::p4::v1::P4StructLike>(Arena*);
template<> ::p4::v1::P4Varbit* Arena::CreateMaybeMessage<::p4::v1::P4Varbit>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace p4 {
namespace v1 {

// ===================================================================

class P4Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4Data) */ {
 public:
  P4Data();
  virtual ~P4Data();

  P4Data(const P4Data& from);

  inline P4Data& operator=(const P4Data& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  P4Data(P4Data&& from) noexcept
    : P4Data() {
    *this = ::std::move(from);
  }

  inline P4Data& operator=(P4Data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const P4Data& default_instance();

  enum DataCase {
    kBitstring = 1,
    kVarbit = 2,
    kBool = 3,
    kTuple = 4,
    kStruct = 5,
    kHeader = 6,
    kHeaderUnion = 7,
    kHeaderStack = 8,
    kHeaderUnionStack = 9,
    kEnum = 10,
    kError = 11,
    kEnumValue = 12,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P4Data* internal_default_instance() {
    return reinterpret_cast<const P4Data*>(
               &_P4Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(P4Data* other);
  friend void swap(P4Data& a, P4Data& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline P4Data* New() const final {
    return CreateMaybeMessage<P4Data>(NULL);
  }

  P4Data* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<P4Data>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const P4Data& from);
  void MergeFrom(const P4Data& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes bitstring = 1;
  private:
  bool has_bitstring() const;
  public:
  void clear_bitstring();
  static const int kBitstringFieldNumber = 1;
  const ::std::string& bitstring() const;
  void set_bitstring(const ::std::string& value);
  #if LANG_CXX11
  void set_bitstring(::std::string&& value);
  #endif
  void set_bitstring(const char* value);
  void set_bitstring(const void* value, size_t size);
  ::std::string* mutable_bitstring();
  ::std::string* release_bitstring();
  void set_allocated_bitstring(::std::string* bitstring);

  // .p4.v1.P4Varbit varbit = 2;
  bool has_varbit() const;
  void clear_varbit();
  static const int kVarbitFieldNumber = 2;
  private:
  const ::p4::v1::P4Varbit& _internal_varbit() const;
  public:
  const ::p4::v1::P4Varbit& varbit() const;
  ::p4::v1::P4Varbit* release_varbit();
  ::p4::v1::P4Varbit* mutable_varbit();
  void set_allocated_varbit(::p4::v1::P4Varbit* varbit);

  // bool bool = 3;
  private:
  bool has_bool_() const;
  public:
  void clear_bool_();
  static const int kBoolFieldNumber = 3;
  bool bool_() const;
  void set_bool_(bool value);

  // .p4.v1.P4StructLike tuple = 4;
  bool has_tuple() const;
  void clear_tuple();
  static const int kTupleFieldNumber = 4;
  private:
  const ::p4::v1::P4StructLike& _internal_tuple() const;
  public:
  const ::p4::v1::P4StructLike& tuple() const;
  ::p4::v1::P4StructLike* release_tuple();
  ::p4::v1::P4StructLike* mutable_tuple();
  void set_allocated_tuple(::p4::v1::P4StructLike* tuple);

  // .p4.v1.P4StructLike struct = 5;
  bool has_struct_() const;
  void clear_struct_();
  static const int kStructFieldNumber = 5;
  private:
  const ::p4::v1::P4StructLike& _internal_struct_() const;
  public:
  const ::p4::v1::P4StructLike& struct_() const;
  ::p4::v1::P4StructLike* release_struct_();
  ::p4::v1::P4StructLike* mutable_struct_();
  void set_allocated_struct_(::p4::v1::P4StructLike* struct_);

  // .p4.v1.P4Header header = 6;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 6;
  private:
  const ::p4::v1::P4Header& _internal_header() const;
  public:
  const ::p4::v1::P4Header& header() const;
  ::p4::v1::P4Header* release_header();
  ::p4::v1::P4Header* mutable_header();
  void set_allocated_header(::p4::v1::P4Header* header);

  // .p4.v1.P4HeaderUnion header_union = 7;
  bool has_header_union() const;
  void clear_header_union();
  static const int kHeaderUnionFieldNumber = 7;
  private:
  const ::p4::v1::P4HeaderUnion& _internal_header_union() const;
  public:
  const ::p4::v1::P4HeaderUnion& header_union() const;
  ::p4::v1::P4HeaderUnion* release_header_union();
  ::p4::v1::P4HeaderUnion* mutable_header_union();
  void set_allocated_header_union(::p4::v1::P4HeaderUnion* header_union);

  // .p4.v1.P4HeaderStack header_stack = 8;
  bool has_header_stack() const;
  void clear_header_stack();
  static const int kHeaderStackFieldNumber = 8;
  private:
  const ::p4::v1::P4HeaderStack& _internal_header_stack() const;
  public:
  const ::p4::v1::P4HeaderStack& header_stack() const;
  ::p4::v1::P4HeaderStack* release_header_stack();
  ::p4::v1::P4HeaderStack* mutable_header_stack();
  void set_allocated_header_stack(::p4::v1::P4HeaderStack* header_stack);

  // .p4.v1.P4HeaderUnionStack header_union_stack = 9;
  bool has_header_union_stack() const;
  void clear_header_union_stack();
  static const int kHeaderUnionStackFieldNumber = 9;
  private:
  const ::p4::v1::P4HeaderUnionStack& _internal_header_union_stack() const;
  public:
  const ::p4::v1::P4HeaderUnionStack& header_union_stack() const;
  ::p4::v1::P4HeaderUnionStack* release_header_union_stack();
  ::p4::v1::P4HeaderUnionStack* mutable_header_union_stack();
  void set_allocated_header_union_stack(::p4::v1::P4HeaderUnionStack* header_union_stack);

  // string enum = 10;
  private:
  bool has_enum_() const;
  public:
  void clear_enum_();
  static const int kEnumFieldNumber = 10;
  const ::std::string& enum_() const;
  void set_enum_(const ::std::string& value);
  #if LANG_CXX11
  void set_enum_(::std::string&& value);
  #endif
  void set_enum_(const char* value);
  void set_enum_(const char* value, size_t size);
  ::std::string* mutable_enum_();
  ::std::string* release_enum_();
  void set_allocated_enum_(::std::string* enum_);

  // string error = 11;
  private:
  bool has_error() const;
  public:
  void clear_error();
  static const int kErrorFieldNumber = 11;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // bytes enum_value = 12;
  private:
  bool has_enum_value() const;
  public:
  void clear_enum_value();
  static const int kEnumValueFieldNumber = 12;
  const ::std::string& enum_value() const;
  void set_enum_value(const ::std::string& value);
  #if LANG_CXX11
  void set_enum_value(::std::string&& value);
  #endif
  void set_enum_value(const char* value);
  void set_enum_value(const void* value, size_t size);
  ::std::string* mutable_enum_value();
  ::std::string* release_enum_value();
  void set_allocated_enum_value(::std::string* enum_value);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:p4.v1.P4Data)
 private:
  void set_has_bitstring();
  void set_has_varbit();
  void set_has_bool_();
  void set_has_tuple();
  void set_has_struct_();
  void set_has_header();
  void set_has_header_union();
  void set_has_header_stack();
  void set_has_header_union_stack();
  void set_has_enum_();
  void set_has_error();
  void set_has_enum_value();

  inline bool has_data() const;
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DataUnion {
    DataUnion() {}
    ::google::protobuf::internal::ArenaStringPtr bitstring_;
    ::p4::v1::P4Varbit* varbit_;
    bool bool__;
    ::p4::v1::P4StructLike* tuple_;
    ::p4::v1::P4StructLike* struct__;
    ::p4::v1::P4Header* header_;
    ::p4::v1::P4HeaderUnion* header_union_;
    ::p4::v1::P4HeaderStack* header_stack_;
    ::p4::v1::P4HeaderUnionStack* header_union_stack_;
    ::google::protobuf::internal::ArenaStringPtr enum__;
    ::google::protobuf::internal::ArenaStringPtr error_;
    ::google::protobuf::internal::ArenaStringPtr enum_value_;
  } data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_p4_2fv1_2fp4data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class P4Varbit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4Varbit) */ {
 public:
  P4Varbit();
  virtual ~P4Varbit();

  P4Varbit(const P4Varbit& from);

  inline P4Varbit& operator=(const P4Varbit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  P4Varbit(P4Varbit&& from) noexcept
    : P4Varbit() {
    *this = ::std::move(from);
  }

  inline P4Varbit& operator=(P4Varbit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const P4Varbit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P4Varbit* internal_default_instance() {
    return reinterpret_cast<const P4Varbit*>(
               &_P4Varbit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(P4Varbit* other);
  friend void swap(P4Varbit& a, P4Varbit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline P4Varbit* New() const final {
    return CreateMaybeMessage<P4Varbit>(NULL);
  }

  P4Varbit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<P4Varbit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const P4Varbit& from);
  void MergeFrom(const P4Varbit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4Varbit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes bitstring = 1;
  void clear_bitstring();
  static const int kBitstringFieldNumber = 1;
  const ::std::string& bitstring() const;
  void set_bitstring(const ::std::string& value);
  #if LANG_CXX11
  void set_bitstring(::std::string&& value);
  #endif
  void set_bitstring(const char* value);
  void set_bitstring(const void* value, size_t size);
  ::std::string* mutable_bitstring();
  ::std::string* release_bitstring();
  void set_allocated_bitstring(::std::string* bitstring);

  // int32 bitwidth = 2;
  void clear_bitwidth();
  static const int kBitwidthFieldNumber = 2;
  ::google::protobuf::int32 bitwidth() const;
  void set_bitwidth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:p4.v1.P4Varbit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bitstring_;
  ::google::protobuf::int32 bitwidth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_p4_2fv1_2fp4data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class P4StructLike : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4StructLike) */ {
 public:
  P4StructLike();
  virtual ~P4StructLike();

  P4StructLike(const P4StructLike& from);

  inline P4StructLike& operator=(const P4StructLike& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  P4StructLike(P4StructLike&& from) noexcept
    : P4StructLike() {
    *this = ::std::move(from);
  }

  inline P4StructLike& operator=(P4StructLike&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const P4StructLike& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P4StructLike* internal_default_instance() {
    return reinterpret_cast<const P4StructLike*>(
               &_P4StructLike_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(P4StructLike* other);
  friend void swap(P4StructLike& a, P4StructLike& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline P4StructLike* New() const final {
    return CreateMaybeMessage<P4StructLike>(NULL);
  }

  P4StructLike* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<P4StructLike>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const P4StructLike& from);
  void MergeFrom(const P4StructLike& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4StructLike* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .p4.v1.P4Data members = 1;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 1;
  ::p4::v1::P4Data* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Data >*
      mutable_members();
  const ::p4::v1::P4Data& members(int index) const;
  ::p4::v1::P4Data* add_members();
  const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Data >&
      members() const;

  // @@protoc_insertion_point(class_scope:p4.v1.P4StructLike)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Data > members_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_p4_2fv1_2fp4data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class P4Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4Header) */ {
 public:
  P4Header();
  virtual ~P4Header();

  P4Header(const P4Header& from);

  inline P4Header& operator=(const P4Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  P4Header(P4Header&& from) noexcept
    : P4Header() {
    *this = ::std::move(from);
  }

  inline P4Header& operator=(P4Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const P4Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P4Header* internal_default_instance() {
    return reinterpret_cast<const P4Header*>(
               &_P4Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(P4Header* other);
  friend void swap(P4Header& a, P4Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline P4Header* New() const final {
    return CreateMaybeMessage<P4Header>(NULL);
  }

  P4Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<P4Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const P4Header& from);
  void MergeFrom(const P4Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes bitstrings = 2;
  int bitstrings_size() const;
  void clear_bitstrings();
  static const int kBitstringsFieldNumber = 2;
  const ::std::string& bitstrings(int index) const;
  ::std::string* mutable_bitstrings(int index);
  void set_bitstrings(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_bitstrings(int index, ::std::string&& value);
  #endif
  void set_bitstrings(int index, const char* value);
  void set_bitstrings(int index, const void* value, size_t size);
  ::std::string* add_bitstrings();
  void add_bitstrings(const ::std::string& value);
  #if LANG_CXX11
  void add_bitstrings(::std::string&& value);
  #endif
  void add_bitstrings(const char* value);
  void add_bitstrings(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& bitstrings() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bitstrings();

  // bool is_valid = 1;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 1;
  bool is_valid() const;
  void set_is_valid(bool value);

  // @@protoc_insertion_point(class_scope:p4.v1.P4Header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> bitstrings_;
  bool is_valid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_p4_2fv1_2fp4data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class P4HeaderUnion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4HeaderUnion) */ {
 public:
  P4HeaderUnion();
  virtual ~P4HeaderUnion();

  P4HeaderUnion(const P4HeaderUnion& from);

  inline P4HeaderUnion& operator=(const P4HeaderUnion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  P4HeaderUnion(P4HeaderUnion&& from) noexcept
    : P4HeaderUnion() {
    *this = ::std::move(from);
  }

  inline P4HeaderUnion& operator=(P4HeaderUnion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const P4HeaderUnion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P4HeaderUnion* internal_default_instance() {
    return reinterpret_cast<const P4HeaderUnion*>(
               &_P4HeaderUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(P4HeaderUnion* other);
  friend void swap(P4HeaderUnion& a, P4HeaderUnion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderUnion* New() const final {
    return CreateMaybeMessage<P4HeaderUnion>(NULL);
  }

  P4HeaderUnion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderUnion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const P4HeaderUnion& from);
  void MergeFrom(const P4HeaderUnion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderUnion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string valid_header_name = 1;
  void clear_valid_header_name();
  static const int kValidHeaderNameFieldNumber = 1;
  const ::std::string& valid_header_name() const;
  void set_valid_header_name(const ::std::string& value);
  #if LANG_CXX11
  void set_valid_header_name(::std::string&& value);
  #endif
  void set_valid_header_name(const char* value);
  void set_valid_header_name(const char* value, size_t size);
  ::std::string* mutable_valid_header_name();
  ::std::string* release_valid_header_name();
  void set_allocated_valid_header_name(::std::string* valid_header_name);

  // .p4.v1.P4Header valid_header = 2;
  bool has_valid_header() const;
  void clear_valid_header();
  static const int kValidHeaderFieldNumber = 2;
  private:
  const ::p4::v1::P4Header& _internal_valid_header() const;
  public:
  const ::p4::v1::P4Header& valid_header() const;
  ::p4::v1::P4Header* release_valid_header();
  ::p4::v1::P4Header* mutable_valid_header();
  void set_allocated_valid_header(::p4::v1::P4Header* valid_header);

  // @@protoc_insertion_point(class_scope:p4.v1.P4HeaderUnion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr valid_header_name_;
  ::p4::v1::P4Header* valid_header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_p4_2fv1_2fp4data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class P4HeaderStack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4HeaderStack) */ {
 public:
  P4HeaderStack();
  virtual ~P4HeaderStack();

  P4HeaderStack(const P4HeaderStack& from);

  inline P4HeaderStack& operator=(const P4HeaderStack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  P4HeaderStack(P4HeaderStack&& from) noexcept
    : P4HeaderStack() {
    *this = ::std::move(from);
  }

  inline P4HeaderStack& operator=(P4HeaderStack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const P4HeaderStack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P4HeaderStack* internal_default_instance() {
    return reinterpret_cast<const P4HeaderStack*>(
               &_P4HeaderStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(P4HeaderStack* other);
  friend void swap(P4HeaderStack& a, P4HeaderStack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderStack* New() const final {
    return CreateMaybeMessage<P4HeaderStack>(NULL);
  }

  P4HeaderStack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderStack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const P4HeaderStack& from);
  void MergeFrom(const P4HeaderStack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderStack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .p4.v1.P4Header entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  ::p4::v1::P4Header* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Header >*
      mutable_entries();
  const ::p4::v1::P4Header& entries(int index) const;
  ::p4::v1::P4Header* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Header >&
      entries() const;

  // @@protoc_insertion_point(class_scope:p4.v1.P4HeaderStack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Header > entries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_p4_2fv1_2fp4data_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class P4HeaderUnionStack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:p4.v1.P4HeaderUnionStack) */ {
 public:
  P4HeaderUnionStack();
  virtual ~P4HeaderUnionStack();

  P4HeaderUnionStack(const P4HeaderUnionStack& from);

  inline P4HeaderUnionStack& operator=(const P4HeaderUnionStack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  P4HeaderUnionStack(P4HeaderUnionStack&& from) noexcept
    : P4HeaderUnionStack() {
    *this = ::std::move(from);
  }

  inline P4HeaderUnionStack& operator=(P4HeaderUnionStack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const P4HeaderUnionStack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const P4HeaderUnionStack* internal_default_instance() {
    return reinterpret_cast<const P4HeaderUnionStack*>(
               &_P4HeaderUnionStack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(P4HeaderUnionStack* other);
  friend void swap(P4HeaderUnionStack& a, P4HeaderUnionStack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline P4HeaderUnionStack* New() const final {
    return CreateMaybeMessage<P4HeaderUnionStack>(NULL);
  }

  P4HeaderUnionStack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<P4HeaderUnionStack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const P4HeaderUnionStack& from);
  void MergeFrom(const P4HeaderUnionStack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(P4HeaderUnionStack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .p4.v1.P4HeaderUnion entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  ::p4::v1::P4HeaderUnion* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::p4::v1::P4HeaderUnion >*
      mutable_entries();
  const ::p4::v1::P4HeaderUnion& entries(int index) const;
  ::p4::v1::P4HeaderUnion* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4HeaderUnion >&
      entries() const;

  // @@protoc_insertion_point(class_scope:p4.v1.P4HeaderUnionStack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::p4::v1::P4HeaderUnion > entries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_p4_2fv1_2fp4data_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// P4Data

// bytes bitstring = 1;
inline bool P4Data::has_bitstring() const {
  return data_case() == kBitstring;
}
inline void P4Data::set_has_bitstring() {
  _oneof_case_[0] = kBitstring;
}
inline void P4Data::clear_bitstring() {
  if (has_bitstring()) {
    data_.bitstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& P4Data::bitstring() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.bitstring)
  if (has_bitstring()) {
    return data_.bitstring_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void P4Data::set_bitstring(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bitstring)
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bitstring)
}
#if LANG_CXX11
inline void P4Data::set_bitstring(::std::string&& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bitstring)
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Data.bitstring)
}
#endif
inline void P4Data::set_bitstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Data.bitstring)
}
inline void P4Data::set_bitstring(const void* value, size_t size) {
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Data.bitstring)
}
inline ::std::string* P4Data::mutable_bitstring() {
  if (!has_bitstring()) {
    clear_data();
    set_has_bitstring();
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.bitstring)
  return data_.bitstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* P4Data::release_bitstring() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.bitstring)
  if (has_bitstring()) {
    clear_has_data();
    return data_.bitstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void P4Data::set_allocated_bitstring(::std::string* bitstring) {
  if (!has_bitstring()) {
    data_.bitstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (bitstring != NULL) {
    set_has_bitstring();
    data_.bitstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitstring);
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.bitstring)
}

// .p4.v1.P4Varbit varbit = 2;
inline bool P4Data::has_varbit() const {
  return data_case() == kVarbit;
}
inline void P4Data::set_has_varbit() {
  _oneof_case_[0] = kVarbit;
}
inline void P4Data::clear_varbit() {
  if (has_varbit()) {
    delete data_.varbit_;
    clear_has_data();
  }
}
inline const ::p4::v1::P4Varbit& P4Data::_internal_varbit() const {
  return *data_.varbit_;
}
inline ::p4::v1::P4Varbit* P4Data::release_varbit() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.varbit)
  if (has_varbit()) {
    clear_has_data();
      ::p4::v1::P4Varbit* temp = data_.varbit_;
    data_.varbit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::p4::v1::P4Varbit& P4Data::varbit() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.varbit)
  return has_varbit()
      ? *data_.varbit_
      : *reinterpret_cast< ::p4::v1::P4Varbit*>(&::p4::v1::_P4Varbit_default_instance_);
}
inline ::p4::v1::P4Varbit* P4Data::mutable_varbit() {
  if (!has_varbit()) {
    clear_data();
    set_has_varbit();
    data_.varbit_ = CreateMaybeMessage< ::p4::v1::P4Varbit >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.varbit)
  return data_.varbit_;
}

// bool bool = 3;
inline bool P4Data::has_bool_() const {
  return data_case() == kBool;
}
inline void P4Data::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void P4Data::clear_bool_() {
  if (has_bool_()) {
    data_.bool__ = false;
    clear_has_data();
  }
}
inline bool P4Data::bool_() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.bool)
  if (has_bool_()) {
    return data_.bool__;
  }
  return false;
}
inline void P4Data::set_bool_(bool value) {
  if (!has_bool_()) {
    clear_data();
    set_has_bool_();
  }
  data_.bool__ = value;
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.bool)
}

// .p4.v1.P4StructLike tuple = 4;
inline bool P4Data::has_tuple() const {
  return data_case() == kTuple;
}
inline void P4Data::set_has_tuple() {
  _oneof_case_[0] = kTuple;
}
inline void P4Data::clear_tuple() {
  if (has_tuple()) {
    delete data_.tuple_;
    clear_has_data();
  }
}
inline const ::p4::v1::P4StructLike& P4Data::_internal_tuple() const {
  return *data_.tuple_;
}
inline ::p4::v1::P4StructLike* P4Data::release_tuple() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.tuple)
  if (has_tuple()) {
    clear_has_data();
      ::p4::v1::P4StructLike* temp = data_.tuple_;
    data_.tuple_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::p4::v1::P4StructLike& P4Data::tuple() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.tuple)
  return has_tuple()
      ? *data_.tuple_
      : *reinterpret_cast< ::p4::v1::P4StructLike*>(&::p4::v1::_P4StructLike_default_instance_);
}
inline ::p4::v1::P4StructLike* P4Data::mutable_tuple() {
  if (!has_tuple()) {
    clear_data();
    set_has_tuple();
    data_.tuple_ = CreateMaybeMessage< ::p4::v1::P4StructLike >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.tuple)
  return data_.tuple_;
}

// .p4.v1.P4StructLike struct = 5;
inline bool P4Data::has_struct_() const {
  return data_case() == kStruct;
}
inline void P4Data::set_has_struct_() {
  _oneof_case_[0] = kStruct;
}
inline void P4Data::clear_struct_() {
  if (has_struct_()) {
    delete data_.struct__;
    clear_has_data();
  }
}
inline const ::p4::v1::P4StructLike& P4Data::_internal_struct_() const {
  return *data_.struct__;
}
inline ::p4::v1::P4StructLike* P4Data::release_struct_() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.struct)
  if (has_struct_()) {
    clear_has_data();
      ::p4::v1::P4StructLike* temp = data_.struct__;
    data_.struct__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::p4::v1::P4StructLike& P4Data::struct_() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.struct)
  return has_struct_()
      ? *data_.struct__
      : *reinterpret_cast< ::p4::v1::P4StructLike*>(&::p4::v1::_P4StructLike_default_instance_);
}
inline ::p4::v1::P4StructLike* P4Data::mutable_struct_() {
  if (!has_struct_()) {
    clear_data();
    set_has_struct_();
    data_.struct__ = CreateMaybeMessage< ::p4::v1::P4StructLike >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.struct)
  return data_.struct__;
}

// .p4.v1.P4Header header = 6;
inline bool P4Data::has_header() const {
  return data_case() == kHeader;
}
inline void P4Data::set_has_header() {
  _oneof_case_[0] = kHeader;
}
inline void P4Data::clear_header() {
  if (has_header()) {
    delete data_.header_;
    clear_has_data();
  }
}
inline const ::p4::v1::P4Header& P4Data::_internal_header() const {
  return *data_.header_;
}
inline ::p4::v1::P4Header* P4Data::release_header() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header)
  if (has_header()) {
    clear_has_data();
      ::p4::v1::P4Header* temp = data_.header_;
    data_.header_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::p4::v1::P4Header& P4Data::header() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header)
  return has_header()
      ? *data_.header_
      : *reinterpret_cast< ::p4::v1::P4Header*>(&::p4::v1::_P4Header_default_instance_);
}
inline ::p4::v1::P4Header* P4Data::mutable_header() {
  if (!has_header()) {
    clear_data();
    set_has_header();
    data_.header_ = CreateMaybeMessage< ::p4::v1::P4Header >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header)
  return data_.header_;
}

// .p4.v1.P4HeaderUnion header_union = 7;
inline bool P4Data::has_header_union() const {
  return data_case() == kHeaderUnion;
}
inline void P4Data::set_has_header_union() {
  _oneof_case_[0] = kHeaderUnion;
}
inline void P4Data::clear_header_union() {
  if (has_header_union()) {
    delete data_.header_union_;
    clear_has_data();
  }
}
inline const ::p4::v1::P4HeaderUnion& P4Data::_internal_header_union() const {
  return *data_.header_union_;
}
inline ::p4::v1::P4HeaderUnion* P4Data::release_header_union() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header_union)
  if (has_header_union()) {
    clear_has_data();
      ::p4::v1::P4HeaderUnion* temp = data_.header_union_;
    data_.header_union_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::p4::v1::P4HeaderUnion& P4Data::header_union() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header_union)
  return has_header_union()
      ? *data_.header_union_
      : *reinterpret_cast< ::p4::v1::P4HeaderUnion*>(&::p4::v1::_P4HeaderUnion_default_instance_);
}
inline ::p4::v1::P4HeaderUnion* P4Data::mutable_header_union() {
  if (!has_header_union()) {
    clear_data();
    set_has_header_union();
    data_.header_union_ = CreateMaybeMessage< ::p4::v1::P4HeaderUnion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header_union)
  return data_.header_union_;
}

// .p4.v1.P4HeaderStack header_stack = 8;
inline bool P4Data::has_header_stack() const {
  return data_case() == kHeaderStack;
}
inline void P4Data::set_has_header_stack() {
  _oneof_case_[0] = kHeaderStack;
}
inline void P4Data::clear_header_stack() {
  if (has_header_stack()) {
    delete data_.header_stack_;
    clear_has_data();
  }
}
inline const ::p4::v1::P4HeaderStack& P4Data::_internal_header_stack() const {
  return *data_.header_stack_;
}
inline ::p4::v1::P4HeaderStack* P4Data::release_header_stack() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header_stack)
  if (has_header_stack()) {
    clear_has_data();
      ::p4::v1::P4HeaderStack* temp = data_.header_stack_;
    data_.header_stack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::p4::v1::P4HeaderStack& P4Data::header_stack() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header_stack)
  return has_header_stack()
      ? *data_.header_stack_
      : *reinterpret_cast< ::p4::v1::P4HeaderStack*>(&::p4::v1::_P4HeaderStack_default_instance_);
}
inline ::p4::v1::P4HeaderStack* P4Data::mutable_header_stack() {
  if (!has_header_stack()) {
    clear_data();
    set_has_header_stack();
    data_.header_stack_ = CreateMaybeMessage< ::p4::v1::P4HeaderStack >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header_stack)
  return data_.header_stack_;
}

// .p4.v1.P4HeaderUnionStack header_union_stack = 9;
inline bool P4Data::has_header_union_stack() const {
  return data_case() == kHeaderUnionStack;
}
inline void P4Data::set_has_header_union_stack() {
  _oneof_case_[0] = kHeaderUnionStack;
}
inline void P4Data::clear_header_union_stack() {
  if (has_header_union_stack()) {
    delete data_.header_union_stack_;
    clear_has_data();
  }
}
inline const ::p4::v1::P4HeaderUnionStack& P4Data::_internal_header_union_stack() const {
  return *data_.header_union_stack_;
}
inline ::p4::v1::P4HeaderUnionStack* P4Data::release_header_union_stack() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.header_union_stack)
  if (has_header_union_stack()) {
    clear_has_data();
      ::p4::v1::P4HeaderUnionStack* temp = data_.header_union_stack_;
    data_.header_union_stack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::p4::v1::P4HeaderUnionStack& P4Data::header_union_stack() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.header_union_stack)
  return has_header_union_stack()
      ? *data_.header_union_stack_
      : *reinterpret_cast< ::p4::v1::P4HeaderUnionStack*>(&::p4::v1::_P4HeaderUnionStack_default_instance_);
}
inline ::p4::v1::P4HeaderUnionStack* P4Data::mutable_header_union_stack() {
  if (!has_header_union_stack()) {
    clear_data();
    set_has_header_union_stack();
    data_.header_union_stack_ = CreateMaybeMessage< ::p4::v1::P4HeaderUnionStack >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.header_union_stack)
  return data_.header_union_stack_;
}

// string enum = 10;
inline bool P4Data::has_enum_() const {
  return data_case() == kEnum;
}
inline void P4Data::set_has_enum_() {
  _oneof_case_[0] = kEnum;
}
inline void P4Data::clear_enum_() {
  if (has_enum_()) {
    data_.enum__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& P4Data::enum_() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.enum)
  if (has_enum_()) {
    return data_.enum__.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void P4Data::set_enum_(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum)
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum)
}
#if LANG_CXX11
inline void P4Data::set_enum_(::std::string&& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum)
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Data.enum)
}
#endif
inline void P4Data::set_enum_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Data.enum)
}
inline void P4Data::set_enum_(const char* value, size_t size) {
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Data.enum)
}
inline ::std::string* P4Data::mutable_enum_() {
  if (!has_enum_()) {
    clear_data();
    set_has_enum_();
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.enum)
  return data_.enum__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* P4Data::release_enum_() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.enum)
  if (has_enum_()) {
    clear_has_data();
    return data_.enum__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void P4Data::set_allocated_enum_(::std::string* enum_) {
  if (!has_enum_()) {
    data_.enum__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (enum_ != NULL) {
    set_has_enum_();
    data_.enum__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enum_);
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.enum)
}

// string error = 11;
inline bool P4Data::has_error() const {
  return data_case() == kError;
}
inline void P4Data::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void P4Data::clear_error() {
  if (has_error()) {
    data_.error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& P4Data::error() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.error)
  if (has_error()) {
    return data_.error_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void P4Data::set_error(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.error)
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.error)
}
#if LANG_CXX11
inline void P4Data::set_error(::std::string&& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.error)
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Data.error)
}
#endif
inline void P4Data::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Data.error)
}
inline void P4Data::set_error(const char* value, size_t size) {
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Data.error)
}
inline ::std::string* P4Data::mutable_error() {
  if (!has_error()) {
    clear_data();
    set_has_error();
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.error)
  return data_.error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* P4Data::release_error() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.error)
  if (has_error()) {
    clear_has_data();
    return data_.error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void P4Data::set_allocated_error(::std::string* error) {
  if (!has_error()) {
    data_.error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (error != NULL) {
    set_has_error();
    data_.error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.error)
}

// bytes enum_value = 12;
inline bool P4Data::has_enum_value() const {
  return data_case() == kEnumValue;
}
inline void P4Data::set_has_enum_value() {
  _oneof_case_[0] = kEnumValue;
}
inline void P4Data::clear_enum_value() {
  if (has_enum_value()) {
    data_.enum_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_data();
  }
}
inline const ::std::string& P4Data::enum_value() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Data.enum_value)
  if (has_enum_value()) {
    return data_.enum_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void P4Data::set_enum_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum_value)
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum_value)
}
#if LANG_CXX11
inline void P4Data::set_enum_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Data.enum_value)
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Data.enum_value)
}
#endif
inline void P4Data::set_enum_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Data.enum_value)
}
inline void P4Data::set_enum_value(const void* value, size_t size) {
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  data_.enum_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Data.enum_value)
}
inline ::std::string* P4Data::mutable_enum_value() {
  if (!has_enum_value()) {
    clear_data();
    set_has_enum_value();
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Data.enum_value)
  return data_.enum_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* P4Data::release_enum_value() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Data.enum_value)
  if (has_enum_value()) {
    clear_has_data();
    return data_.enum_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void P4Data::set_allocated_enum_value(::std::string* enum_value) {
  if (!has_enum_value()) {
    data_.enum_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (enum_value != NULL) {
    set_has_enum_value();
    data_.enum_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enum_value);
  }
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Data.enum_value)
}

inline bool P4Data::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void P4Data::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline P4Data::DataCase P4Data::data_case() const {
  return P4Data::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// P4Varbit

// bytes bitstring = 1;
inline void P4Varbit::clear_bitstring() {
  bitstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& P4Varbit::bitstring() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Varbit.bitstring)
  return bitstring_.GetNoArena();
}
inline void P4Varbit::set_bitstring(const ::std::string& value) {
  
  bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4Varbit.bitstring)
}
#if LANG_CXX11
inline void P4Varbit::set_bitstring(::std::string&& value) {
  
  bitstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4Varbit.bitstring)
}
#endif
inline void P4Varbit::set_bitstring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Varbit.bitstring)
}
inline void P4Varbit::set_bitstring(const void* value, size_t size) {
  
  bitstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Varbit.bitstring)
}
inline ::std::string* P4Varbit::mutable_bitstring() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Varbit.bitstring)
  return bitstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* P4Varbit::release_bitstring() {
  // @@protoc_insertion_point(field_release:p4.v1.P4Varbit.bitstring)
  
  return bitstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void P4Varbit::set_allocated_bitstring(::std::string* bitstring) {
  if (bitstring != NULL) {
    
  } else {
    
  }
  bitstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bitstring);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4Varbit.bitstring)
}

// int32 bitwidth = 2;
inline void P4Varbit::clear_bitwidth() {
  bitwidth_ = 0;
}
inline ::google::protobuf::int32 P4Varbit::bitwidth() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Varbit.bitwidth)
  return bitwidth_;
}
inline void P4Varbit::set_bitwidth(::google::protobuf::int32 value) {
  
  bitwidth_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.P4Varbit.bitwidth)
}

// -------------------------------------------------------------------

// P4StructLike

// repeated .p4.v1.P4Data members = 1;
inline int P4StructLike::members_size() const {
  return members_.size();
}
inline void P4StructLike::clear_members() {
  members_.Clear();
}
inline ::p4::v1::P4Data* P4StructLike::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4StructLike.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Data >*
P4StructLike::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4StructLike.members)
  return &members_;
}
inline const ::p4::v1::P4Data& P4StructLike::members(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4StructLike.members)
  return members_.Get(index);
}
inline ::p4::v1::P4Data* P4StructLike::add_members() {
  // @@protoc_insertion_point(field_add:p4.v1.P4StructLike.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Data >&
P4StructLike::members() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4StructLike.members)
  return members_;
}

// -------------------------------------------------------------------

// P4Header

// bool is_valid = 1;
inline void P4Header::clear_is_valid() {
  is_valid_ = false;
}
inline bool P4Header::is_valid() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Header.is_valid)
  return is_valid_;
}
inline void P4Header::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:p4.v1.P4Header.is_valid)
}

// repeated bytes bitstrings = 2;
inline int P4Header::bitstrings_size() const {
  return bitstrings_.size();
}
inline void P4Header::clear_bitstrings() {
  bitstrings_.Clear();
}
inline const ::std::string& P4Header::bitstrings(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4Header.bitstrings)
  return bitstrings_.Get(index);
}
inline ::std::string* P4Header::mutable_bitstrings(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4Header.bitstrings)
  return bitstrings_.Mutable(index);
}
inline void P4Header::set_bitstrings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Header.bitstrings)
  bitstrings_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void P4Header::set_bitstrings(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:p4.v1.P4Header.bitstrings)
  bitstrings_.Mutable(index)->assign(std::move(value));
}
#endif
inline void P4Header::set_bitstrings(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bitstrings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:p4.v1.P4Header.bitstrings)
}
inline void P4Header::set_bitstrings(int index, const void* value, size_t size) {
  bitstrings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4Header.bitstrings)
}
inline ::std::string* P4Header::add_bitstrings() {
  // @@protoc_insertion_point(field_add_mutable:p4.v1.P4Header.bitstrings)
  return bitstrings_.Add();
}
inline void P4Header::add_bitstrings(const ::std::string& value) {
  bitstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:p4.v1.P4Header.bitstrings)
}
#if LANG_CXX11
inline void P4Header::add_bitstrings(::std::string&& value) {
  bitstrings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:p4.v1.P4Header.bitstrings)
}
#endif
inline void P4Header::add_bitstrings(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  bitstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:p4.v1.P4Header.bitstrings)
}
inline void P4Header::add_bitstrings(const void* value, size_t size) {
  bitstrings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:p4.v1.P4Header.bitstrings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
P4Header::bitstrings() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4Header.bitstrings)
  return bitstrings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
P4Header::mutable_bitstrings() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4Header.bitstrings)
  return &bitstrings_;
}

// -------------------------------------------------------------------

// P4HeaderUnion

// string valid_header_name = 1;
inline void P4HeaderUnion::clear_valid_header_name() {
  valid_header_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& P4HeaderUnion::valid_header_name() const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderUnion.valid_header_name)
  return valid_header_name_.GetNoArena();
}
inline void P4HeaderUnion::set_valid_header_name(const ::std::string& value) {
  
  valid_header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:p4.v1.P4HeaderUnion.valid_header_name)
}
#if LANG_CXX11
inline void P4HeaderUnion::set_valid_header_name(::std::string&& value) {
  
  valid_header_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:p4.v1.P4HeaderUnion.valid_header_name)
}
#endif
inline void P4HeaderUnion::set_valid_header_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  valid_header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:p4.v1.P4HeaderUnion.valid_header_name)
}
inline void P4HeaderUnion::set_valid_header_name(const char* value, size_t size) {
  
  valid_header_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:p4.v1.P4HeaderUnion.valid_header_name)
}
inline ::std::string* P4HeaderUnion::mutable_valid_header_name() {
  
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderUnion.valid_header_name)
  return valid_header_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* P4HeaderUnion::release_valid_header_name() {
  // @@protoc_insertion_point(field_release:p4.v1.P4HeaderUnion.valid_header_name)
  
  return valid_header_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void P4HeaderUnion::set_allocated_valid_header_name(::std::string* valid_header_name) {
  if (valid_header_name != NULL) {
    
  } else {
    
  }
  valid_header_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valid_header_name);
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4HeaderUnion.valid_header_name)
}

// .p4.v1.P4Header valid_header = 2;
inline bool P4HeaderUnion::has_valid_header() const {
  return this != internal_default_instance() && valid_header_ != NULL;
}
inline void P4HeaderUnion::clear_valid_header() {
  if (GetArenaNoVirtual() == NULL && valid_header_ != NULL) {
    delete valid_header_;
  }
  valid_header_ = NULL;
}
inline const ::p4::v1::P4Header& P4HeaderUnion::_internal_valid_header() const {
  return *valid_header_;
}
inline const ::p4::v1::P4Header& P4HeaderUnion::valid_header() const {
  const ::p4::v1::P4Header* p = valid_header_;
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderUnion.valid_header)
  return p != NULL ? *p : *reinterpret_cast<const ::p4::v1::P4Header*>(
      &::p4::v1::_P4Header_default_instance_);
}
inline ::p4::v1::P4Header* P4HeaderUnion::release_valid_header() {
  // @@protoc_insertion_point(field_release:p4.v1.P4HeaderUnion.valid_header)
  
  ::p4::v1::P4Header* temp = valid_header_;
  valid_header_ = NULL;
  return temp;
}
inline ::p4::v1::P4Header* P4HeaderUnion::mutable_valid_header() {
  
  if (valid_header_ == NULL) {
    auto* p = CreateMaybeMessage<::p4::v1::P4Header>(GetArenaNoVirtual());
    valid_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderUnion.valid_header)
  return valid_header_;
}
inline void P4HeaderUnion::set_allocated_valid_header(::p4::v1::P4Header* valid_header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete valid_header_;
  }
  if (valid_header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      valid_header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, valid_header, submessage_arena);
    }
    
  } else {
    
  }
  valid_header_ = valid_header;
  // @@protoc_insertion_point(field_set_allocated:p4.v1.P4HeaderUnion.valid_header)
}

// -------------------------------------------------------------------

// P4HeaderStack

// repeated .p4.v1.P4Header entries = 1;
inline int P4HeaderStack::entries_size() const {
  return entries_.size();
}
inline void P4HeaderStack::clear_entries() {
  entries_.Clear();
}
inline ::p4::v1::P4Header* P4HeaderStack::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderStack.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Header >*
P4HeaderStack::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4HeaderStack.entries)
  return &entries_;
}
inline const ::p4::v1::P4Header& P4HeaderStack::entries(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderStack.entries)
  return entries_.Get(index);
}
inline ::p4::v1::P4Header* P4HeaderStack::add_entries() {
  // @@protoc_insertion_point(field_add:p4.v1.P4HeaderStack.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4Header >&
P4HeaderStack::entries() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4HeaderStack.entries)
  return entries_;
}

// -------------------------------------------------------------------

// P4HeaderUnionStack

// repeated .p4.v1.P4HeaderUnion entries = 1;
inline int P4HeaderUnionStack::entries_size() const {
  return entries_.size();
}
inline void P4HeaderUnionStack::clear_entries() {
  entries_.Clear();
}
inline ::p4::v1::P4HeaderUnion* P4HeaderUnionStack::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:p4.v1.P4HeaderUnionStack.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::p4::v1::P4HeaderUnion >*
P4HeaderUnionStack::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:p4.v1.P4HeaderUnionStack.entries)
  return &entries_;
}
inline const ::p4::v1::P4HeaderUnion& P4HeaderUnionStack::entries(int index) const {
  // @@protoc_insertion_point(field_get:p4.v1.P4HeaderUnionStack.entries)
  return entries_.Get(index);
}
inline ::p4::v1::P4HeaderUnion* P4HeaderUnionStack::add_entries() {
  // @@protoc_insertion_point(field_add:p4.v1.P4HeaderUnionStack.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::p4::v1::P4HeaderUnion >&
P4HeaderUnionStack::entries() const {
  // @@protoc_insertion_point(field_list:p4.v1.P4HeaderUnionStack.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace p4

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_p4_2fv1_2fp4data_2eproto
